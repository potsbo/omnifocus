fragment TaskViewModel on TaskInterface {
  name
  id
  effectiveDueDate
  completed
  effectivelyCompleted
  containingProject {
    id
    name
  }
  flagged
}

fragment ProjectViewModel on Project {
  name
  completed
  id
  numberOfAvailableTasks
}

fragment TopLevelProjects on Document {
  projects {
    edges {
      node {
        ...ProjectViewModel
      }
    }
  }
}

fragment FolderedProjectDepth1 on Document {
  folders {
    edges {
      node {
        name
        id
        projects {
          edges {
            node {
              ...ProjectViewModel
            }
          }
        }
      }
    }
  }
}

fragment FolderedTagDepth1 on Document {
  tags {
    edges {
      node {
        name
        id
        tags {
          edges {
            node {
              name
              id
            }
          }
        }
      }
    }
  }
}

fragment FolderedTagDepth2 on Document {
  tags {
    edges {
      node {
        name # folder
        id
        availableTaskCount
        tags {
          edges {
            node {
              name # item
              id
              availableTaskCount
              tags {
                edges {
                  node {
                    id # for children count
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

query GetTasks(
  $onlyFlagged: Boolean! = false
  $onlyAvailable: Boolean! = false
  $withEffectiveDueDate: Boolean! = false
) {
  defaultDocument {
    flattenedTasks
      @whose(
        condition: {
          operator: "and"
          operands: [
            { field: "effectivelyCompleted", value: "false" }
            { field: "flagged", enabled: $onlyFlagged }
            {
              operator: "not"
              operands: [{ field: "effectiveDeferDate", value: "null", enabled: $withEffectiveDueDate }]
            }
            {
              enabled: $onlyAvailable
              operator: "or"
              operands: [
                { field: "effectiveDeferDate", operator: "=", value: "null" }
                { field: "effectiveDeferDate", operator: "<", value: "new Date()" }
              ]
            }
          ]
        }
      ) {
      edges {
        node {
          ...TaskViewModel
        }
      }
    }
  }
}

query GetInboxTasks {
  defaultDocument {
    inboxTasks
      @whose(
        condition: {
          operator: "and"
          operands: [
            { field: "effectivelyCompleted", value: "false" }
            {
              operator: "or"
              operands: [
                { field: "effectiveDeferDate", operator: "=", value: "null" }
                { field: "effectiveDeferDate", operator: "<", value: "new Date()" }
              ]
            }
          ]
        }
      ) {
      edges {
        node {
          ...TaskViewModel
        }
      }
    }
  }
}

query GetTasksInProject($projectId: String!) {
  defaultDocument {
    projects {
      byId(id: $projectId) {
        rootTask {
          tasks {
            edges {
              node {
                ...TaskViewModel
              }
            }
          }
        }
      }
    }
  }
}

query GetNestedProjects {
  defaultDocument {
    ...FolderedProjectDepth1
  }
}

query GetTasksWithTag($tagId: String!) {
  defaultDocument {
    tags {
      byId(id: $tagId) {
        tasks {
          edges {
            node {
              ...TaskViewModel
            }
          }
        }
      }
    }
  }
}

query GetTopLevelProjects {
  defaultDocument {
    ...FolderedProjectDepth1
    ...TopLevelProjects
  }
}

query GetTaskCreationSupportInfo {
  defaultDocument {
    ...FolderedProjectDepth1
    ...TopLevelProjects
    ...FolderedTagDepth1
  }
}

query GetNestedTags {
  defaultDocument {
    ...FolderedTagDepth2
  }
}

query GetNestedTagsFrom($tagId: String!) {
  defaultDocument {
    tags {
      byId(id: $tagId) {
        id
        name # title
        tags {
          edges {
            node {
              name # folder
              id
              availableTaskCount
              tags {
                edges {
                  node {
                    name # item
                    id
                    availableTaskCount
                    tags {
                      edges {
                        node {
                          id # for children count
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

query GetPerspectiveNames {
  defaultDocument {
    perspectiveNames
  }
}
