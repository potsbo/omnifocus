fragment TaskViewModel on TaskInterface {
  name
  id
  effectiveDueDate
  completed
  effectivelyCompleted
  containingProject {
    id
    name
  }
  flagged
}
fragment ProjectViewModel on ProjectInterface {
  name
  completed
  id
  numberOfAvailableTasks
}

fragment TopLevelProjects on Document {
  projects {
    edges {
      node {
        ...ProjectViewModel
      }
    }
  }
}

fragment FolderedProjectDepth1 on Document {
  folders {
    edges {
      node {
        name
        id
        projects {
          edges {
            node {
              ...ProjectViewModel
            }
          }
        }
      }
    }
  }
}

fragment FolderedTagDepth1 on Document {
  tags {
    edges {
      node {
        name
        id
        tags {
          edges {
            node {
              name
              id
            }
          }
        }
      }
    }
  }
}

fragment FolderedTagDepth2 on Document {
  tags {
    edges {
      node {
        name # folder
        id
        availableTaskCount
        tags {
          edges {
            node {
              name # item
              id
              availableTaskCount
              tags {
                edges {
                  node {
                    id # for children count
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

query GetTasks(
  $onlyFlagged: Boolean! = false
  $onlyAvailable: Boolean! = false
  $withEffectiveDueDate: Boolean! = false
) {
  application {
    defaultDocument {
      flattenedTasks(
        whose: {
          operator: "and"
          operands: [
            { field: "effectivelyCompleted", value: "false" }
            { field: "flagged", enabled: $onlyFlagged }
            {
              operator: "not"
              operands: [{ field: "effectiveDeferDate", value: "null", enabled: $withEffectiveDueDate }]
            }
            {
              enabled: $onlyAvailable
              operator: "or"
              operands: [
                { field: "effectiveDeferDate", operator: "=", value: "null" }
                { field: "effectiveDeferDate", operator: "<", value: "new Date()" }
              ]
            }
          ]
        }
      ) {
        edges {
          node {
            ...TaskViewModel
          }
        }
      }
    }
  }
}

query GetInboxTasks {
  application {
    defaultDocument {
      inboxTasks(
        whose: {
          operator: "and"
          operands: [
            { field: "effectivelyCompleted", value: "false" }
            {
              operator: "or"
              operands: [
                { field: "effectiveDeferDate", operator: "=", value: "null" }
                { field: "effectiveDeferDate", operator: "<", value: "new Date()" }
              ]
            }
          ]
        }
      ) {
        edges {
          node {
            ...TaskViewModel
          }
        }
      }
    }
  }
}

query GetTasksInProject($projectId: ID!) {
  application {
    defaultDocument {
      projects {
        byId(id: $projectId) {
          rootTask {
            tasks {
              edges {
                node {
                  ...TaskViewModel
                }
              }
            }
          }
        }
      }
    }
  }
}

query GetNestedProjects {
  application {
    defaultDocument {
      ...FolderedProjectDepth1
    }
  }
}

query GetTasksWithTag($tagId: ID!) {
  application {
    defaultDocument {
      tags {
        byId(id: $tagId) {
          tasks {
            edges {
              node {
                ...TaskViewModel
              }
            }
          }
        }
      }
    }
  }
}

query GetTopLevelProjects {
  application {
    defaultDocument {
      ...FolderedProjectDepth1
      ...TopLevelProjects
    }
  }
}

query GetTaskCreationSupportInfo {
  application {
    defaultDocument {
      ...FolderedProjectDepth1
      ...TopLevelProjects
      ...FolderedTagDepth1
    }
  }
}

query GetNestedTags {
  application {
    defaultDocument {
      ...FolderedTagDepth2
    }
  }
}

query GetNestedTagsFrom($tagId: ID!) {
  application {
    defaultDocument {
      tags {
        byId(id: $tagId) {
          id
          name # title
          tags {
            edges {
              node {
                name # folder
                id
                availableTaskCount
                tags {
                  edges {
                    node {
                      name # item
                      id
                      availableTaskCount
                      tags {
                        edges {
                          node {
                            id # for children count
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
query GetPerspectiveNames {
  application {
    defaultDocument {
      perspectiveNames
    }
  }
}
