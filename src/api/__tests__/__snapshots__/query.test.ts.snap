// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`query for Connection 1`] = `
"function pascalCase(s) {
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
const _parent = Application(\\"OmniFocus\\");
({
  defaultDocument: {
    projects: (() => {
      const nodes = _parent.defaultDocument().projects();
      return {
        pageInfo: {
          hasPreviousPage: false,
          hasNextPage: false,
          startCursor: \\"\\",
          endCursor: \\"\\",
        },
        edges: nodes.map((elm) => {
          return {
            cursor: elm.id(),
            node: {
              __typename: pascalCase(elm.properties().pcls),
              name: elm.name(),
            },
          };
        }),
      };
    })(),
  },
});
"
`;

exports[`query for GetInboxTasksDocument 1`] = `
"function pascalCase(s) {
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
const _parent = Application(\\"OmniFocus\\");
({
  defaultDocument: {
    inboxTasks: (() => {
      const nodes = _parent
        .defaultDocument()
        .inboxTasks.whose({
          _and: [
            { effectivelyCompleted: { _equals: false } },
            {
              _or: [
                { effectiveDeferDate: { _equals: null } },
                { effectiveDeferDate: { _lessThan: new Date() } },
              ],
            },
          ],
        })();
      return {
        pageInfo: {
          hasPreviousPage: false,
          hasNextPage: false,
          startCursor: \\"\\",
          endCursor: \\"\\",
        },
        edges: nodes.map((elm) => {
          return {
            cursor: elm.id(),
            node: {
              __typename: pascalCase(elm.properties().pcls),
              completed: elm.completed(),
              containingProject: elm.containingProject()
                ? {
                    id: elm.containingProject().id(),
                    name: elm.containingProject().name(),
                  }
                : undefined,
              effectiveDueDate: elm.effectiveDueDate(),
              effectivelyCompleted: elm.effectivelyCompleted(),
              flagged: elm.flagged(),
              id: elm.id(),
              name: elm.name(),
            },
          };
        }),
      };
    })(),
  },
});
"
`;

exports[`query for GetTasksDocument 1`] = `
"function pascalCase(s) {
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
const onlyFlagged = true;
const onlyAvailable = true;
const withEffectiveDueDate = false;
const _parent = Application(\\"OmniFocus\\");
({
  defaultDocument: {
    flattenedTasks: (() => {
      const nodes = _parent
        .defaultDocument()
        .flattenedTasks.whose({
          _and: [
            { effectivelyCompleted: { _equals: false } },
            { flagged: { _equals: true } },
            {
              _or: [
                { effectiveDeferDate: { _equals: null } },
                { effectiveDeferDate: { _lessThan: new Date() } },
              ],
            },
          ],
        })();
      return {
        pageInfo: {
          hasPreviousPage: false,
          hasNextPage: false,
          startCursor: \\"\\",
          endCursor: \\"\\",
        },
        edges: nodes.map((elm) => {
          return {
            cursor: elm.id(),
            node: {
              __typename: pascalCase(elm.properties().pcls),
              completed: elm.completed(),
              containingProject: elm.containingProject()
                ? {
                    id: elm.containingProject().id(),
                    name: elm.containingProject().name(),
                  }
                : undefined,
              effectiveDueDate: elm.effectiveDueDate(),
              effectivelyCompleted: elm.effectivelyCompleted(),
              flagged: elm.flagged(),
              id: elm.id(),
              name: elm.name(),
            },
          };
        }),
      };
    })(),
  },
});
"
`;

exports[`query for GetTasksDocument for forecast 1`] = `
"function pascalCase(s) {
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
const onlyFlagged = false;
const onlyAvailable = true;
const withEffectiveDueDate = true;
const _parent = Application(\\"OmniFocus\\");
({
  defaultDocument: {
    flattenedTasks: (() => {
      const nodes = _parent
        .defaultDocument()
        .flattenedTasks.whose({
          _and: [
            { effectivelyCompleted: { _equals: false } },
            { _not: [{ effectiveDeferDate: { _equals: null } }] },
            {
              _or: [
                { effectiveDeferDate: { _equals: null } },
                { effectiveDeferDate: { _lessThan: new Date() } },
              ],
            },
          ],
        })();
      return {
        pageInfo: {
          hasPreviousPage: false,
          hasNextPage: false,
          startCursor: \\"\\",
          endCursor: \\"\\",
        },
        edges: nodes.map((elm) => {
          return {
            cursor: elm.id(),
            node: {
              __typename: pascalCase(elm.properties().pcls),
              completed: elm.completed(),
              containingProject: elm.containingProject()
                ? {
                    id: elm.containingProject().id(),
                    name: elm.containingProject().name(),
                  }
                : undefined,
              effectiveDueDate: elm.effectiveDueDate(),
              effectivelyCompleted: elm.effectivelyCompleted(),
              flagged: elm.flagged(),
              id: elm.id(),
              name: elm.name(),
            },
          };
        }),
      };
    })(),
  },
});
"
`;

exports[`query for GetTasksInProjectDocument 1`] = `
"function pascalCase(s) {
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
const projectId = \\"foobar\\";
const _parent = Application(\\"OmniFocus\\");
({
  defaultDocument: {
    projects: (() => {
      const nodes = _parent.defaultDocument().projects();
      return {
        pageInfo: {
          hasPreviousPage: false,
          hasNextPage: false,
          startCursor: \\"\\",
          endCursor: \\"\\",
        },
        edges: nodes.map((elm) => {
          return {
            cursor: elm.id(),
          };
        }),
        byId: _parent.defaultDocument().projects.byId(projectId)
          ? {
              __typename: pascalCase(
                _parent.defaultDocument().projects.byId(projectId).properties()
                  .pcls
              ),
              rootTask: {
                tasks: (() => {
                  const nodes = _parent
                    .defaultDocument()
                    .projects.byId(projectId)
                    .rootTask()
                    .tasks();
                  return {
                    pageInfo: {
                      hasPreviousPage: false,
                      hasNextPage: false,
                      startCursor: \\"\\",
                      endCursor: \\"\\",
                    },
                    edges: nodes.map((elm) => {
                      return {
                        cursor: elm.id(),
                        node: {
                          __typename: pascalCase(elm.properties().pcls),
                          __typename: pascalCase(elm.properties().pcls),
                          completed: elm.completed(),
                          containingProject: elm.containingProject()
                            ? {
                                id: elm.containingProject().id(),
                                name: elm.containingProject().name(),
                              }
                            : undefined,
                          effectiveDueDate: elm.effectiveDueDate(),
                          effectivelyCompleted: elm.effectivelyCompleted(),
                          flagged: elm.flagged(),
                          id: elm.id(),
                          name: elm.name(),
                        },
                      };
                    }),
                  };
                })(),
              },
            }
          : undefined,
      };
    })(),
  },
});
"
`;

exports[`query for GetTopLevelProjects 1`] = `
"function pascalCase(s) {
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
const _parent = Application(\\"OmniFocus\\");
({
  defaultDocument: {
    folders: (() => {
      const nodes = _parent.defaultDocument().folders();
      return {
        pageInfo: {
          hasPreviousPage: false,
          hasNextPage: false,
          startCursor: \\"\\",
          endCursor: \\"\\",
        },
        edges: nodes.map((elm) => {
          return {
            cursor: elm.id(),
            node: {
              __typename: pascalCase(elm.properties().pcls),
              id: elm.id(),
              name: elm.name(),
              projects: (() => {
                const nodes = elm.projects();
                return {
                  pageInfo: {
                    hasPreviousPage: false,
                    hasNextPage: false,
                    startCursor: \\"\\",
                    endCursor: \\"\\",
                  },
                  edges: nodes.map((elm) => {
                    return {
                      cursor: elm.id(),
                      node: {
                        __typename: pascalCase(elm.properties().pcls),
                        completed: elm.completed(),
                        id: elm.id(),
                        name: elm.name(),
                        numberOfAvailableTasks: elm.numberOfAvailableTasks(),
                      },
                    };
                  }),
                };
              })(),
            },
          };
        }),
      };
    })(),
    projects: (() => {
      const nodes = _parent.defaultDocument().projects();
      return {
        pageInfo: {
          hasPreviousPage: false,
          hasNextPage: false,
          startCursor: \\"\\",
          endCursor: \\"\\",
        },
        edges: nodes.map((elm) => {
          return {
            cursor: elm.id(),
            node: {
              __typename: pascalCase(elm.properties().pcls),
              completed: elm.completed(),
              id: elm.id(),
              name: elm.name(),
              numberOfAvailableTasks: elm.numberOfAvailableTasks(),
            },
          };
        }),
      };
    })(),
  },
});
"
`;

exports[`query with inline fragment 1`] = `
"function pascalCase(s) {
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
const _parent = Application(\\"OmniFocus\\");
({
  defaultDocument: {
    folders: (() => {
      const nodes = _parent.defaultDocument().folders();
      return {
        pageInfo: {
          hasPreviousPage: false,
          hasNextPage: false,
          startCursor: \\"\\",
          endCursor: \\"\\",
        },
        edges: nodes.map((elm) => {
          return {
            cursor: elm.id(),
            node: {
              __typename: pascalCase(elm.properties().pcls),
              name: elm.name(),
              sections: (() => {
                const nodes = elm.sections();
                return {
                  pageInfo: {
                    hasPreviousPage: false,
                    hasNextPage: false,
                    startCursor: \\"\\",
                    endCursor: \\"\\",
                  },
                  edges: nodes.map((elm) => {
                    return {
                      cursor: elm.id(),
                      node: {
                        ...(() => {
                          return elm.properties().pcls.toLowerCase() ===
                            \\"Folder\\".toLowerCase()
                            ? {
                                name: elm.name(),
                                __typename: \\"Folder\\",
                              }
                            : {};
                        })(),
                        ...(() => {
                          return elm.properties().pcls.toLowerCase() ===
                            \\"Project\\".toLowerCase()
                            ? {
                                completed: elm.completed(),
                                __typename: \\"Project\\",
                              }
                            : {};
                        })(),
                        __typename: pascalCase(elm.properties().pcls),
                      },
                    };
                  }),
                };
              })(),
            },
          };
        }),
      };
    })(),
  },
});
"
`;

exports[`query with project interface 1`] = `
"function pascalCase(s) {
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
const _parent = Application(\\"OmniFocus\\");
({
  defaultDocument: {
    projects: (() => {
      const nodes = _parent.defaultDocument().projects();
      return {
        pageInfo: {
          hasPreviousPage: false,
          hasNextPage: false,
          startCursor: \\"\\",
          endCursor: \\"\\",
        },
        edges: nodes.map((elm) => {
          return {
            cursor: elm.id(),
          };
        }),
        byId: _parent.defaultDocument().projects.byId(\\"hZoaSakOnG4\\")
          ? {
              __typename: pascalCase(
                _parent
                  .defaultDocument()
                  .projects.byId(\\"hZoaSakOnG4\\")
                  .properties().pcls
              ),
              rootTask: {
                id: _parent
                  .defaultDocument()
                  .projects.byId(\\"hZoaSakOnG4\\")
                  .rootTask()
                  .id(),
              },
            }
          : undefined,
      };
    })(),
  },
});
"
`;
