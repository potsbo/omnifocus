// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`query for Connection 1`] = `
"({
  projects: (() => {
    const nodes = parent.projects();
    return {
      pageInfo: {
        hasPreviousPage: false,
        hasNextPage: false,
        startCursor: \\"\\",
        endCursor: \\"\\",
      },
      edges: nodes.map((elm) => {
        return {
          cursor: elm.id(),
          node: { name: elm.name() },
        };
      }),
    };
  })(),
});
"
`;

exports[`query for GetInboxTasksDocument 1`] = `
"parent.map((elm) => {
  return {
    name: elm.name(),
    id: elm.id(),
    effectiveDueDate: elm.effectiveDueDate(),
    completed: elm.completed(),
    effectivelyCompleted: elm.effectivelyCompleted(),
    containingProject: elm.containingProject()
      ? {
          id: elm.containingProject().id(),
          name: elm.containingProject().name(),
        }
      : undefined,
    flagged: elm.flagged(),
  };
});
"
`;

exports[`query for GetTasksDocument 1`] = `
"parent.map((elm) => {
  return {
    name: elm.name(),
    id: elm.id(),
    effectiveDueDate: elm.effectiveDueDate(),
    completed: elm.completed(),
    effectivelyCompleted: elm.effectivelyCompleted(),
    containingProject: elm.containingProject()
      ? {
          id: elm.containingProject().id(),
          name: elm.containingProject().name(),
        }
      : undefined,
    flagged: elm.flagged(),
  };
});
"
`;

exports[`query for GetTasksInProjectDocument 1`] = `
"const projectId = \\"foobar\\";
({
  projects: (() => {
    const nodes = parent.projects();
    return {
      pageInfo: {
        hasPreviousPage: false,
        hasNextPage: false,
        startCursor: \\"\\",
        endCursor: \\"\\",
      },
      edges: nodes.map((elm) => {
        return {
          cursor: elm.id(),
        };
      }),
      byId: parent.projects.byId(projectId)
        ? {
            rootTask: {
              tasks: parent.projects.byId(projectId).rootTask().tasks()
                ? parent.projects
                    .byId(projectId)
                    .rootTask()
                    .tasks()
                    .filter((e) => e.effectiveDeferDate() < new Date())
                    .map((elm) => {
                      return {
                        name: elm.name(),
                        id: elm.id(),
                        effectiveDueDate: elm.effectiveDueDate(),
                        completed: elm.completed(),
                        effectivelyCompleted: elm.effectivelyCompleted(),
                        containingProject: elm.containingProject()
                          ? {
                              id: elm.containingProject().id(),
                              name: elm.containingProject().name(),
                            }
                          : undefined,
                        flagged: elm.flagged(),
                      };
                    })
                : undefined,
            },
          }
        : undefined,
    };
  })(),
});
"
`;
