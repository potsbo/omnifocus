// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`query for Connection 1`] = `
"function pascalCase(s) {
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
function extractId(s) {
  return (
    s
      ?.split(\\"byId\\")
      .reverse()[0]
      .match(/^\\\\(\\"(.+)\\"\\\\)$/)
      ?.reverse()[0] ?? null
  );
}
function pagenate(nodes, { first, after }, getId) {
  const afterIndex =
    after === undefined
      ? undefined
      : nodes.findIndex((n) => getId(n) === after);
  if (afterIndex === -1) {
    return [];
  }
  const start = afterIndex === undefined ? 0 : afterIndex + 1;
  const end = first !== undefined ? start + first : undefined;
  return nodes.slice(start, end);
}
const _parent = Application(\\"OmniFocus\\");
JSON.stringify({
  result: {
    defaultDocument: {
      projects: (() => {
        const allNodes = _parent.defaultDocument().projects();
        const pagenationParam = {};
        const nodes = allNodes;
        return {
          edges: nodes.map((elm) => {
            return {
              cursor: extractId(Automation.getDisplayString(elm)),
              node: {
                __typename: pascalCase(elm.properties().pcls),
                name: elm.name(),
              },
            };
          }),
          pageInfo: {
            hasPreviousPage:
              extractId(Automation.getDisplayString(nodes[0])) !==
              extractId(Automation.getDisplayString(allNodes[0])),
            hasNextPage:
              extractId(
                Automation.getDisplayString(nodes[nodes.length - 1])
              ) !==
              extractId(
                Automation.getDisplayString(allNodes[allNodes.length - 1])
              ),
            startCursor: extractId(Automation.getDisplayString(nodes[0])),
            endCursor: extractId(
              Automation.getDisplayString(nodes[nodes.length - 1])
            ),
          },
        };
      })(),
    },
  },
});
"
`;

exports[`query for GetInboxTasksDocument 1`] = `
"function pascalCase(s) {
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
function extractId(s) {
  return (
    s
      ?.split(\\"byId\\")
      .reverse()[0]
      .match(/^\\\\(\\"(.+)\\"\\\\)$/)
      ?.reverse()[0] ?? null
  );
}
function pagenate(nodes, { first, after }, getId) {
  const afterIndex =
    after === undefined
      ? undefined
      : nodes.findIndex((n) => getId(n) === after);
  if (afterIndex === -1) {
    return [];
  }
  const start = afterIndex === undefined ? 0 : afterIndex + 1;
  const end = first !== undefined ? start + first : undefined;
  return nodes.slice(start, end);
}
const _parent = Application(\\"OmniFocus\\");
JSON.stringify({
  result: {
    defaultDocument: {
      inboxTasks: (() => {
        const allNodes = _parent
          .defaultDocument()
          .inboxTasks.whose({
            _and: [
              { effectivelyCompleted: { _equals: false } },
              {
                _or: [
                  { effectiveDeferDate: { _equals: null } },
                  { effectiveDeferDate: { _lessThan: new Date() } },
                ],
              },
            ],
          })();
        const pagenationParam = {};
        const nodes = allNodes;
        return {
          edges: nodes.map((elm) => {
            return {
              node: {
                completed: elm.completed(),
                containingProject: elm.containingProject()
                  ? {
                      id: extractId(
                        Automation.getDisplayString(elm.containingProject())
                      ),
                      name: elm.containingProject().name(),
                    }
                  : undefined,
                effectiveDueDate: elm.effectiveDueDate(),
                effectivelyCompleted: elm.effectivelyCompleted(),
                flagged: elm.flagged(),
                id: extractId(Automation.getDisplayString(elm)),
                name: elm.name(),
              },
            };
          }),
        };
      })(),
    },
  },
});
"
`;

exports[`query for GetTasksDocument 1`] = `
"function pascalCase(s) {
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
function extractId(s) {
  return (
    s
      ?.split(\\"byId\\")
      .reverse()[0]
      .match(/^\\\\(\\"(.+)\\"\\\\)$/)
      ?.reverse()[0] ?? null
  );
}
function pagenate(nodes, { first, after }, getId) {
  const afterIndex =
    after === undefined
      ? undefined
      : nodes.findIndex((n) => getId(n) === after);
  if (afterIndex === -1) {
    return [];
  }
  const start = afterIndex === undefined ? 0 : afterIndex + 1;
  const end = first !== undefined ? start + first : undefined;
  return nodes.slice(start, end);
}
const onlyFlagged = true;
const onlyAvailable = true;
const withEffectiveDueDate = false;
const _parent = Application(\\"OmniFocus\\");
JSON.stringify({
  result: {
    defaultDocument: {
      flattenedTasks: (() => {
        const allNodes = _parent
          .defaultDocument()
          .flattenedTasks.whose({
            _and: [
              { effectivelyCompleted: { _equals: false } },
              { flagged: { _equals: true } },
              {
                _or: [
                  { effectiveDeferDate: { _equals: null } },
                  { effectiveDeferDate: { _lessThan: new Date() } },
                ],
              },
            ],
          })();
        const pagenationParam = {};
        const nodes = allNodes;
        return {
          edges: nodes.map((elm) => {
            return {
              node: {
                completed: elm.completed(),
                containingProject: elm.containingProject()
                  ? {
                      id: extractId(
                        Automation.getDisplayString(elm.containingProject())
                      ),
                      name: elm.containingProject().name(),
                    }
                  : undefined,
                effectiveDueDate: elm.effectiveDueDate(),
                effectivelyCompleted: elm.effectivelyCompleted(),
                flagged: elm.flagged(),
                id: extractId(Automation.getDisplayString(elm)),
                name: elm.name(),
              },
            };
          }),
        };
      })(),
    },
  },
});
"
`;

exports[`query for GetTasksDocument for forecast 1`] = `
"function pascalCase(s) {
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
function extractId(s) {
  return (
    s
      ?.split(\\"byId\\")
      .reverse()[0]
      .match(/^\\\\(\\"(.+)\\"\\\\)$/)
      ?.reverse()[0] ?? null
  );
}
function pagenate(nodes, { first, after }, getId) {
  const afterIndex =
    after === undefined
      ? undefined
      : nodes.findIndex((n) => getId(n) === after);
  if (afterIndex === -1) {
    return [];
  }
  const start = afterIndex === undefined ? 0 : afterIndex + 1;
  const end = first !== undefined ? start + first : undefined;
  return nodes.slice(start, end);
}
const onlyFlagged = false;
const onlyAvailable = true;
const withEffectiveDueDate = true;
const _parent = Application(\\"OmniFocus\\");
JSON.stringify({
  result: {
    defaultDocument: {
      flattenedTasks: (() => {
        const allNodes = _parent
          .defaultDocument()
          .flattenedTasks.whose({
            _and: [
              { effectivelyCompleted: { _equals: false } },
              { _not: [{ effectiveDeferDate: { _equals: null } }] },
              {
                _or: [
                  { effectiveDeferDate: { _equals: null } },
                  { effectiveDeferDate: { _lessThan: new Date() } },
                ],
              },
            ],
          })();
        const pagenationParam = {};
        const nodes = allNodes;
        return {
          edges: nodes.map((elm) => {
            return {
              node: {
                completed: elm.completed(),
                containingProject: elm.containingProject()
                  ? {
                      id: extractId(
                        Automation.getDisplayString(elm.containingProject())
                      ),
                      name: elm.containingProject().name(),
                    }
                  : undefined,
                effectiveDueDate: elm.effectiveDueDate(),
                effectivelyCompleted: elm.effectivelyCompleted(),
                flagged: elm.flagged(),
                id: extractId(Automation.getDisplayString(elm)),
                name: elm.name(),
              },
            };
          }),
        };
      })(),
    },
  },
});
"
`;

exports[`query for GetTasksInProjectDocument 1`] = `
"function pascalCase(s) {
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
function extractId(s) {
  return (
    s
      ?.split(\\"byId\\")
      .reverse()[0]
      .match(/^\\\\(\\"(.+)\\"\\\\)$/)
      ?.reverse()[0] ?? null
  );
}
function pagenate(nodes, { first, after }, getId) {
  const afterIndex =
    after === undefined
      ? undefined
      : nodes.findIndex((n) => getId(n) === after);
  if (afterIndex === -1) {
    return [];
  }
  const start = afterIndex === undefined ? 0 : afterIndex + 1;
  const end = first !== undefined ? start + first : undefined;
  return nodes.slice(start, end);
}
const projectId = \\"foobar\\";
const _parent = Application(\\"OmniFocus\\");
JSON.stringify({
  result: {
    defaultDocument: {
      projects: (() => {
        const allNodes = _parent.defaultDocument().projects();
        const pagenationParam = {};
        const nodes = allNodes;
        return {
          byId: _parent.defaultDocument().projects.byId(projectId)
            ? {
                __typename: pascalCase(
                  _parent
                    .defaultDocument()
                    .projects.byId(projectId)
                    .properties().pcls
                ),
                rootTask: {
                  tasks: (() => {
                    const allNodes = _parent
                      .defaultDocument()
                      .projects.byId(projectId)
                      .rootTask()
                      .tasks();
                    const pagenationParam = {};
                    const nodes = allNodes;
                    return {
                      edges: nodes.map((elm) => {
                        return {
                          node: {
                            __typename: pascalCase(elm.properties().pcls),
                            completed: elm.completed(),
                            containingProject: elm.containingProject()
                              ? {
                                  id: extractId(
                                    Automation.getDisplayString(
                                      elm.containingProject()
                                    )
                                  ),
                                  name: elm.containingProject().name(),
                                }
                              : undefined,
                            effectiveDueDate: elm.effectiveDueDate(),
                            effectivelyCompleted: elm.effectivelyCompleted(),
                            flagged: elm.flagged(),
                            id: extractId(Automation.getDisplayString(elm)),
                            name: elm.name(),
                          },
                        };
                      }),
                    };
                  })(),
                },
              }
            : undefined,
        };
      })(),
    },
  },
});
"
`;

exports[`query for GetTopLevelProjects 1`] = `
"function pascalCase(s) {
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
function extractId(s) {
  return (
    s
      ?.split(\\"byId\\")
      .reverse()[0]
      .match(/^\\\\(\\"(.+)\\"\\\\)$/)
      ?.reverse()[0] ?? null
  );
}
function pagenate(nodes, { first, after }, getId) {
  const afterIndex =
    after === undefined
      ? undefined
      : nodes.findIndex((n) => getId(n) === after);
  if (afterIndex === -1) {
    return [];
  }
  const start = afterIndex === undefined ? 0 : afterIndex + 1;
  const end = first !== undefined ? start + first : undefined;
  return nodes.slice(start, end);
}
const _parent = Application(\\"OmniFocus\\");
JSON.stringify({
  result: {
    defaultDocument: {
      folders: (() => {
        const allNodes = _parent.defaultDocument().folders();
        const pagenationParam = {};
        const nodes = allNodes;
        return {
          edges: nodes.map((elm) => {
            return {
              node: {
                __typename: pascalCase(elm.properties().pcls),
                id: extractId(Automation.getDisplayString(elm)),
                name: elm.name(),
                projects: (() => {
                  const allNodes = elm.projects();
                  const pagenationParam = {};
                  const nodes = allNodes;
                  return {
                    edges: nodes.map((elm) => {
                      return {
                        node: {
                          __typename: pascalCase(elm.properties().pcls),
                          completed: elm.completed(),
                          id: extractId(Automation.getDisplayString(elm)),
                          name: elm.name(),
                          numberOfAvailableTasks: elm.numberOfAvailableTasks(),
                        },
                      };
                    }),
                  };
                })(),
              },
            };
          }),
        };
      })(),
      projects: (() => {
        const allNodes = _parent.defaultDocument().projects();
        const pagenationParam = {};
        const nodes = allNodes;
        return {
          edges: nodes.map((elm) => {
            return {
              node: {
                __typename: pascalCase(elm.properties().pcls),
                completed: elm.completed(),
                id: extractId(Automation.getDisplayString(elm)),
                name: elm.name(),
                numberOfAvailableTasks: elm.numberOfAvailableTasks(),
              },
            };
          }),
        };
      })(),
    },
  },
});
"
`;

exports[`query with inline fragment 1`] = `
"function pascalCase(s) {
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
function extractId(s) {
  return (
    s
      ?.split(\\"byId\\")
      .reverse()[0]
      .match(/^\\\\(\\"(.+)\\"\\\\)$/)
      ?.reverse()[0] ?? null
  );
}
function pagenate(nodes, { first, after }, getId) {
  const afterIndex =
    after === undefined
      ? undefined
      : nodes.findIndex((n) => getId(n) === after);
  if (afterIndex === -1) {
    return [];
  }
  const start = afterIndex === undefined ? 0 : afterIndex + 1;
  const end = first !== undefined ? start + first : undefined;
  return nodes.slice(start, end);
}
const _parent = Application(\\"OmniFocus\\");
JSON.stringify({
  result: {
    defaultDocument: {
      folders: (() => {
        const allNodes = _parent.defaultDocument().folders();
        const pagenationParam = {};
        const nodes = allNodes;
        return {
          edges: nodes.map((elm) => {
            return {
              node: {
                __typename: pascalCase(elm.properties().pcls),
                name: elm.name(),
                sections: (() => {
                  const allNodes = elm.sections();
                  const pagenationParam = {};
                  const nodes = allNodes;
                  return {
                    edges: nodes.map((elm) => {
                      return {
                        node: {
                          ...(() => {
                            return elm.properties().pcls.toLowerCase() ===
                              \\"Folder\\".toLowerCase()
                              ? {
                                  name: elm.name(),
                                  __typename: \\"Folder\\",
                                }
                              : {};
                          })(),
                          ...(() => {
                            return elm.properties().pcls.toLowerCase() ===
                              \\"Project\\".toLowerCase()
                              ? {
                                  completed: elm.completed(),
                                  __typename: \\"Project\\",
                                }
                              : {};
                          })(),
                          __typename: pascalCase(elm.properties().pcls),
                        },
                      };
                    }),
                  };
                })(),
              },
            };
          }),
        };
      })(),
    },
  },
});
"
`;

exports[`query with pageInfo 1`] = `
"function pascalCase(s) {
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
function extractId(s) {
  return (
    s
      ?.split(\\"byId\\")
      .reverse()[0]
      .match(/^\\\\(\\"(.+)\\"\\\\)$/)
      ?.reverse()[0] ?? null
  );
}
function pagenate(nodes, { first, after }, getId) {
  const afterIndex =
    after === undefined
      ? undefined
      : nodes.findIndex((n) => getId(n) === after);
  if (afterIndex === -1) {
    return [];
  }
  const start = afterIndex === undefined ? 0 : afterIndex + 1;
  const end = first !== undefined ? start + first : undefined;
  return nodes.slice(start, end);
}
const _parent = Application(\\"OmniFocus\\");
JSON.stringify({
  result: {
    defaultDocument: {
      projects: (() => {
        const allNodes = _parent.defaultDocument().projects();
        const pagenationParam = { first: 10, after: \\"SOME-ID\\" };
        const nodes = pagenate(allNodes, pagenationParam, (n) => {
          return extractId(Automation.getDisplayString(n));
        });
        return {
          pageInfo: {
            hasPreviousPage:
              extractId(Automation.getDisplayString(nodes[0])) !==
              extractId(Automation.getDisplayString(allNodes[0])),
            hasNextPage:
              extractId(
                Automation.getDisplayString(nodes[nodes.length - 1])
              ) !==
              extractId(
                Automation.getDisplayString(allNodes[allNodes.length - 1])
              ),
            startCursor: extractId(Automation.getDisplayString(nodes[0])),
            endCursor: extractId(
              Automation.getDisplayString(nodes[nodes.length - 1])
            ),
          },
        };
      })(),
    },
  },
});
"
`;

exports[`query with project interface 1`] = `
"function pascalCase(s) {
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
function extractId(s) {
  return (
    s
      ?.split(\\"byId\\")
      .reverse()[0]
      .match(/^\\\\(\\"(.+)\\"\\\\)$/)
      ?.reverse()[0] ?? null
  );
}
function pagenate(nodes, { first, after }, getId) {
  const afterIndex =
    after === undefined
      ? undefined
      : nodes.findIndex((n) => getId(n) === after);
  if (afterIndex === -1) {
    return [];
  }
  const start = afterIndex === undefined ? 0 : afterIndex + 1;
  const end = first !== undefined ? start + first : undefined;
  return nodes.slice(start, end);
}
const _parent = Application(\\"OmniFocus\\");
JSON.stringify({
  result: {
    defaultDocument: {
      projects: (() => {
        const allNodes = _parent.defaultDocument().projects();
        const pagenationParam = {};
        const nodes = allNodes;
        return {
          byId: _parent.defaultDocument().projects.byId(\\"hZoaSakOnG4\\")
            ? {
                __typename: pascalCase(
                  _parent
                    .defaultDocument()
                    .projects.byId(\\"hZoaSakOnG4\\")
                    .properties().pcls
                ),
                rootTask: {
                  id: extractId(
                    Automation.getDisplayString(
                      _parent
                        .defaultDocument()
                        .projects.byId(\\"hZoaSakOnG4\\")
                        .rootTask()
                    )
                  ),
                },
              }
            : undefined,
        };
      })(),
    },
  },
});
"
`;
