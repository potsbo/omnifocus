// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`query for GetInboxTasksDocument 1`] = `
"parent.map((elm) => {
  return {
    name: elm.name(),
    id: elm.id(),
    effectiveDueDate: elm.effectiveDueDate(),
    completed: elm.completed(),
    effectivelyCompleted: elm.effectivelyCompleted(),
    containingProject: elm.containingProject()
      ? Array.isArray(elm.containingProject())
        ? elm.containingProject().map((elm) => {
            return { id: elm.id(), name: elm.name() };
          })
        : {
            id: elm.containingProject().id(),
            name: elm.containingProject().name(),
          }
      : undefined,
    flagged: elm.flagged(),
  };
});
"
`;

exports[`query for GetTasksDocument 1`] = `
"parent.map((elm) => {
  return {
    name: elm.name(),
    id: elm.id(),
    effectiveDueDate: elm.effectiveDueDate(),
    completed: elm.completed(),
    effectivelyCompleted: elm.effectivelyCompleted(),
    containingProject: elm.containingProject()
      ? Array.isArray(elm.containingProject())
        ? elm.containingProject().map((elm) => {
            return { id: elm.id(), name: elm.name() };
          })
        : {
            id: elm.containingProject().id(),
            name: elm.containingProject().name(),
          }
      : undefined,
    flagged: elm.flagged(),
  };
});
"
`;

exports[`query for GetTasksInProjectDocument 1`] = `
"const projectId = \\"foobar\\";
({
  projects: {
    byId: parent.projects.byId(projectId)
      ? Array.isArray(parent.projects.byId(projectId))
        ? parent.projects.byId(projectId).map((elm) => {
            return {
              rootTask: {
                tasks: elm.rootTask().tasks()
                  ? Array.isArray(elm.rootTask().tasks())
                    ? elm
                        .rootTask()
                        .tasks()
                        .filter((e) => e.effectiveDeferDate() < new Date())
                        .map((elm) => {
                          return {
                            name: elm.name(),
                            id: elm.id(),
                            effectiveDueDate: elm.effectiveDueDate(),
                            completed: elm.completed(),
                            effectivelyCompleted: elm.effectivelyCompleted(),
                            containingProject: elm.containingProject()
                              ? Array.isArray(elm.containingProject())
                                ? elm.containingProject().map((elm) => {
                                    return { id: elm.id(), name: elm.name() };
                                  })
                                : {
                                    id: elm.containingProject().id(),
                                    name: elm.containingProject().name(),
                                  }
                              : undefined,
                            flagged: elm.flagged(),
                          };
                        })
                    : {
                        name: elm.rootTask().tasks().name(),
                        id: elm.rootTask().tasks().id(),
                        effectiveDueDate: elm
                          .rootTask()
                          .tasks()
                          .effectiveDueDate(),
                        completed: elm.rootTask().tasks().completed(),
                        effectivelyCompleted: elm
                          .rootTask()
                          .tasks()
                          .effectivelyCompleted(),
                        containingProject: elm
                          .rootTask()
                          .tasks()
                          .containingProject()
                          ? Array.isArray(
                              elm.rootTask().tasks().containingProject()
                            )
                            ? elm
                                .rootTask()
                                .tasks()
                                .containingProject()
                                .map((elm) => {
                                  return { id: elm.id(), name: elm.name() };
                                })
                            : {
                                id: elm
                                  .rootTask()
                                  .tasks()
                                  .containingProject()
                                  .id(),
                                name: elm
                                  .rootTask()
                                  .tasks()
                                  .containingProject()
                                  .name(),
                              }
                          : undefined,
                        flagged: elm.rootTask().tasks().flagged(),
                      }
                  : undefined,
              },
            };
          })
        : {
            rootTask: {
              tasks: parent.projects.byId(projectId).rootTask().tasks()
                ? Array.isArray(
                    parent.projects.byId(projectId).rootTask().tasks()
                  )
                  ? parent.projects
                      .byId(projectId)
                      .rootTask()
                      .tasks()
                      .filter((e) => e.effectiveDeferDate() < new Date())
                      .map((elm) => {
                        return {
                          name: elm.name(),
                          id: elm.id(),
                          effectiveDueDate: elm.effectiveDueDate(),
                          completed: elm.completed(),
                          effectivelyCompleted: elm.effectivelyCompleted(),
                          containingProject: elm.containingProject()
                            ? Array.isArray(elm.containingProject())
                              ? elm.containingProject().map((elm) => {
                                  return { id: elm.id(), name: elm.name() };
                                })
                              : {
                                  id: elm.containingProject().id(),
                                  name: elm.containingProject().name(),
                                }
                            : undefined,
                          flagged: elm.flagged(),
                        };
                      })
                  : {
                      name: parent.projects
                        .byId(projectId)
                        .rootTask()
                        .tasks()
                        .name(),
                      id: parent.projects
                        .byId(projectId)
                        .rootTask()
                        .tasks()
                        .id(),
                      effectiveDueDate: parent.projects
                        .byId(projectId)
                        .rootTask()
                        .tasks()
                        .effectiveDueDate(),
                      completed: parent.projects
                        .byId(projectId)
                        .rootTask()
                        .tasks()
                        .completed(),
                      effectivelyCompleted: parent.projects
                        .byId(projectId)
                        .rootTask()
                        .tasks()
                        .effectivelyCompleted(),
                      containingProject: parent.projects
                        .byId(projectId)
                        .rootTask()
                        .tasks()
                        .containingProject()
                        ? Array.isArray(
                            parent.projects
                              .byId(projectId)
                              .rootTask()
                              .tasks()
                              .containingProject()
                          )
                          ? parent.projects
                              .byId(projectId)
                              .rootTask()
                              .tasks()
                              .containingProject()
                              .map((elm) => {
                                return { id: elm.id(), name: elm.name() };
                              })
                          : {
                              id: parent.projects
                                .byId(projectId)
                                .rootTask()
                                .tasks()
                                .containingProject()
                                .id(),
                              name: parent.projects
                                .byId(projectId)
                                .rootTask()
                                .tasks()
                                .containingProject()
                                .name(),
                            }
                        : undefined,
                      flagged: parent.projects
                        .byId(projectId)
                        .rootTask()
                        .tasks()
                        .flagged(),
                    }
                : undefined,
            },
          }
      : undefined,
  },
});
"
`;

exports[`run for GetTasksInProjectDocument 1`] = `
Object {
  "projects": Object {
    "byId": Object {
      "rootTask": Object {
        "tasks": Array [
          Object {
            "completed": false,
            "containingProject": Object {
              "id": undefined,
              "name": "projectName",
            },
            "effectiveDueDate": null,
            "effectivelyCompleted": null,
            "flagged": false,
            "id": "bar",
            "name": "foo",
          },
        ],
      },
    },
  },
}
`;
