// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`query for GetInboxTasksDocument 1`] = `
"parent
  ? Array.isArray(parent)
    ? parent.map((elm) => {
        return {
          name: elm.name(),
          id: elm.id(),
          effectiveDueDate: elm.effectiveDueDate(),
          completed: elm.completed(),
          effectivelyCompleted: elm.effectivelyCompleted(),
          containingProject: elm.containingProject()
            ? Array.isArray(elm.containingProject())
              ? elm.containingProject().map((elm) => {
                  return { id: elm.id(), name: elm.name() };
                })
              : {
                  id: elm.containingProject().id(),
                  name: elm.containingProject().name(),
                }
            : undefined,
          flagged: elm.flagged(),
        };
      })
    : {
        name: parent.name(),
        id: parent.id(),
        effectiveDueDate: parent.effectiveDueDate(),
        completed: parent.completed(),
        effectivelyCompleted: parent.effectivelyCompleted(),
        containingProject: parent.containingProject()
          ? Array.isArray(parent.containingProject())
            ? parent.containingProject().map((elm) => {
                return { id: elm.id(), name: elm.name() };
              })
            : {
                id: parent.containingProject().id(),
                name: parent.containingProject().name(),
              }
          : undefined,
        flagged: parent.flagged(),
      }
  : undefined;
"
`;

exports[`query for GetTasksDocument 1`] = `
"parent
  ? Array.isArray(parent)
    ? parent.map((elm) => {
        return {
          name: elm.name(),
          id: elm.id(),
          effectiveDueDate: elm.effectiveDueDate(),
          completed: elm.completed(),
          effectivelyCompleted: elm.effectivelyCompleted(),
          containingProject: elm.containingProject()
            ? Array.isArray(elm.containingProject())
              ? elm.containingProject().map((elm) => {
                  return { id: elm.id(), name: elm.name() };
                })
              : {
                  id: elm.containingProject().id(),
                  name: elm.containingProject().name(),
                }
            : undefined,
          flagged: elm.flagged(),
        };
      })
    : {
        name: parent.name(),
        id: parent.id(),
        effectiveDueDate: parent.effectiveDueDate(),
        completed: parent.completed(),
        effectivelyCompleted: parent.effectivelyCompleted(),
        containingProject: parent.containingProject()
          ? Array.isArray(parent.containingProject())
            ? parent.containingProject().map((elm) => {
                return { id: elm.id(), name: elm.name() };
              })
            : {
                id: parent.containingProject().id(),
                name: parent.containingProject().name(),
              }
          : undefined,
        flagged: parent.flagged(),
      }
  : undefined;
"
`;

exports[`query for GetTasksInProjectDocument 1`] = `
"parent
  ? Array.isArray(parent)
    ? parent.map((elm) => {
        return {
          byId: elm.byId()
            ? Array.isArray(elm.byId())
              ? elm.byId().map((elm) => {
                  return {
                    rootTask: elm.rootTask()
                      ? Array.isArray(elm.rootTask())
                        ? elm.rootTask().map((elm) => {
                            return {
                              tasks: elm.tasks()
                                ? Array.isArray(elm.tasks())
                                  ? elm.tasks().map((elm) => {
                                      return {
                                        name: elm.name(),
                                        id: elm.id(),
                                        effectiveDueDate:
                                          elm.effectiveDueDate(),
                                        completed: elm.completed(),
                                        effectivelyCompleted:
                                          elm.effectivelyCompleted(),
                                        containingProject:
                                          elm.containingProject()
                                            ? Array.isArray(
                                                elm.containingProject()
                                              )
                                              ? elm
                                                  .containingProject()
                                                  .map((elm) => {
                                                    return {
                                                      id: elm.id(),
                                                      name: elm.name(),
                                                    };
                                                  })
                                              : {
                                                  id: elm
                                                    .containingProject()
                                                    .id(),
                                                  name: elm
                                                    .containingProject()
                                                    .name(),
                                                }
                                            : undefined,
                                        flagged: elm.flagged(),
                                      };
                                    })
                                  : {
                                      name: elm.tasks().name(),
                                      id: elm.tasks().id(),
                                      effectiveDueDate: elm
                                        .tasks()
                                        .effectiveDueDate(),
                                      completed: elm.tasks().completed(),
                                      effectivelyCompleted: elm
                                        .tasks()
                                        .effectivelyCompleted(),
                                      containingProject: elm
                                        .tasks()
                                        .containingProject()
                                        ? Array.isArray(
                                            elm.tasks().containingProject()
                                          )
                                          ? elm
                                              .tasks()
                                              .containingProject()
                                              .map((elm) => {
                                                return {
                                                  id: elm.id(),
                                                  name: elm.name(),
                                                };
                                              })
                                          : {
                                              id: elm
                                                .tasks()
                                                .containingProject()
                                                .id(),
                                              name: elm
                                                .tasks()
                                                .containingProject()
                                                .name(),
                                            }
                                        : undefined,
                                      flagged: elm.tasks().flagged(),
                                    }
                                : undefined,
                            };
                          })
                        : {
                            tasks: elm.rootTask().tasks()
                              ? Array.isArray(elm.rootTask().tasks())
                                ? elm
                                    .rootTask()
                                    .tasks()
                                    .map((elm) => {
                                      return {
                                        name: elm.name(),
                                        id: elm.id(),
                                        effectiveDueDate:
                                          elm.effectiveDueDate(),
                                        completed: elm.completed(),
                                        effectivelyCompleted:
                                          elm.effectivelyCompleted(),
                                        containingProject:
                                          elm.containingProject()
                                            ? Array.isArray(
                                                elm.containingProject()
                                              )
                                              ? elm
                                                  .containingProject()
                                                  .map((elm) => {
                                                    return {
                                                      id: elm.id(),
                                                      name: elm.name(),
                                                    };
                                                  })
                                              : {
                                                  id: elm
                                                    .containingProject()
                                                    .id(),
                                                  name: elm
                                                    .containingProject()
                                                    .name(),
                                                }
                                            : undefined,
                                        flagged: elm.flagged(),
                                      };
                                    })
                                : {
                                    name: elm.rootTask().tasks().name(),
                                    id: elm.rootTask().tasks().id(),
                                    effectiveDueDate: elm
                                      .rootTask()
                                      .tasks()
                                      .effectiveDueDate(),
                                    completed: elm
                                      .rootTask()
                                      .tasks()
                                      .completed(),
                                    effectivelyCompleted: elm
                                      .rootTask()
                                      .tasks()
                                      .effectivelyCompleted(),
                                    containingProject: elm
                                      .rootTask()
                                      .tasks()
                                      .containingProject()
                                      ? Array.isArray(
                                          elm
                                            .rootTask()
                                            .tasks()
                                            .containingProject()
                                        )
                                        ? elm
                                            .rootTask()
                                            .tasks()
                                            .containingProject()
                                            .map((elm) => {
                                              return {
                                                id: elm.id(),
                                                name: elm.name(),
                                              };
                                            })
                                        : {
                                            id: elm
                                              .rootTask()
                                              .tasks()
                                              .containingProject()
                                              .id(),
                                            name: elm
                                              .rootTask()
                                              .tasks()
                                              .containingProject()
                                              .name(),
                                          }
                                      : undefined,
                                    flagged: elm.rootTask().tasks().flagged(),
                                  }
                              : undefined,
                          }
                      : undefined,
                  };
                })
              : {
                  rootTask: elm.byId().rootTask()
                    ? Array.isArray(elm.byId().rootTask())
                      ? elm
                          .byId()
                          .rootTask()
                          .map((elm) => {
                            return {
                              tasks: elm.tasks()
                                ? Array.isArray(elm.tasks())
                                  ? elm.tasks().map((elm) => {
                                      return {
                                        name: elm.name(),
                                        id: elm.id(),
                                        effectiveDueDate:
                                          elm.effectiveDueDate(),
                                        completed: elm.completed(),
                                        effectivelyCompleted:
                                          elm.effectivelyCompleted(),
                                        containingProject:
                                          elm.containingProject()
                                            ? Array.isArray(
                                                elm.containingProject()
                                              )
                                              ? elm
                                                  .containingProject()
                                                  .map((elm) => {
                                                    return {
                                                      id: elm.id(),
                                                      name: elm.name(),
                                                    };
                                                  })
                                              : {
                                                  id: elm
                                                    .containingProject()
                                                    .id(),
                                                  name: elm
                                                    .containingProject()
                                                    .name(),
                                                }
                                            : undefined,
                                        flagged: elm.flagged(),
                                      };
                                    })
                                  : {
                                      name: elm.tasks().name(),
                                      id: elm.tasks().id(),
                                      effectiveDueDate: elm
                                        .tasks()
                                        .effectiveDueDate(),
                                      completed: elm.tasks().completed(),
                                      effectivelyCompleted: elm
                                        .tasks()
                                        .effectivelyCompleted(),
                                      containingProject: elm
                                        .tasks()
                                        .containingProject()
                                        ? Array.isArray(
                                            elm.tasks().containingProject()
                                          )
                                          ? elm
                                              .tasks()
                                              .containingProject()
                                              .map((elm) => {
                                                return {
                                                  id: elm.id(),
                                                  name: elm.name(),
                                                };
                                              })
                                          : {
                                              id: elm
                                                .tasks()
                                                .containingProject()
                                                .id(),
                                              name: elm
                                                .tasks()
                                                .containingProject()
                                                .name(),
                                            }
                                        : undefined,
                                      flagged: elm.tasks().flagged(),
                                    }
                                : undefined,
                            };
                          })
                      : {
                          tasks: elm.byId().rootTask().tasks()
                            ? Array.isArray(elm.byId().rootTask().tasks())
                              ? elm
                                  .byId()
                                  .rootTask()
                                  .tasks()
                                  .map((elm) => {
                                    return {
                                      name: elm.name(),
                                      id: elm.id(),
                                      effectiveDueDate: elm.effectiveDueDate(),
                                      completed: elm.completed(),
                                      effectivelyCompleted:
                                        elm.effectivelyCompleted(),
                                      containingProject: elm.containingProject()
                                        ? Array.isArray(elm.containingProject())
                                          ? elm
                                              .containingProject()
                                              .map((elm) => {
                                                return {
                                                  id: elm.id(),
                                                  name: elm.name(),
                                                };
                                              })
                                          : {
                                              id: elm.containingProject().id(),
                                              name: elm
                                                .containingProject()
                                                .name(),
                                            }
                                        : undefined,
                                      flagged: elm.flagged(),
                                    };
                                  })
                              : {
                                  name: elm.byId().rootTask().tasks().name(),
                                  id: elm.byId().rootTask().tasks().id(),
                                  effectiveDueDate: elm
                                    .byId()
                                    .rootTask()
                                    .tasks()
                                    .effectiveDueDate(),
                                  completed: elm
                                    .byId()
                                    .rootTask()
                                    .tasks()
                                    .completed(),
                                  effectivelyCompleted: elm
                                    .byId()
                                    .rootTask()
                                    .tasks()
                                    .effectivelyCompleted(),
                                  containingProject: elm
                                    .byId()
                                    .rootTask()
                                    .tasks()
                                    .containingProject()
                                    ? Array.isArray(
                                        elm
                                          .byId()
                                          .rootTask()
                                          .tasks()
                                          .containingProject()
                                      )
                                      ? elm
                                          .byId()
                                          .rootTask()
                                          .tasks()
                                          .containingProject()
                                          .map((elm) => {
                                            return {
                                              id: elm.id(),
                                              name: elm.name(),
                                            };
                                          })
                                      : {
                                          id: elm
                                            .byId()
                                            .rootTask()
                                            .tasks()
                                            .containingProject()
                                            .id(),
                                          name: elm
                                            .byId()
                                            .rootTask()
                                            .tasks()
                                            .containingProject()
                                            .name(),
                                        }
                                    : undefined,
                                  flagged: elm
                                    .byId()
                                    .rootTask()
                                    .tasks()
                                    .flagged(),
                                }
                            : undefined,
                        }
                    : undefined,
                }
            : undefined,
        };
      })
    : {
        byId: parent.byId()
          ? Array.isArray(parent.byId())
            ? parent.byId().map((elm) => {
                return {
                  rootTask: elm.rootTask()
                    ? Array.isArray(elm.rootTask())
                      ? elm.rootTask().map((elm) => {
                          return {
                            tasks: elm.tasks()
                              ? Array.isArray(elm.tasks())
                                ? elm.tasks().map((elm) => {
                                    return {
                                      name: elm.name(),
                                      id: elm.id(),
                                      effectiveDueDate: elm.effectiveDueDate(),
                                      completed: elm.completed(),
                                      effectivelyCompleted:
                                        elm.effectivelyCompleted(),
                                      containingProject: elm.containingProject()
                                        ? Array.isArray(elm.containingProject())
                                          ? elm
                                              .containingProject()
                                              .map((elm) => {
                                                return {
                                                  id: elm.id(),
                                                  name: elm.name(),
                                                };
                                              })
                                          : {
                                              id: elm.containingProject().id(),
                                              name: elm
                                                .containingProject()
                                                .name(),
                                            }
                                        : undefined,
                                      flagged: elm.flagged(),
                                    };
                                  })
                                : {
                                    name: elm.tasks().name(),
                                    id: elm.tasks().id(),
                                    effectiveDueDate: elm
                                      .tasks()
                                      .effectiveDueDate(),
                                    completed: elm.tasks().completed(),
                                    effectivelyCompleted: elm
                                      .tasks()
                                      .effectivelyCompleted(),
                                    containingProject: elm
                                      .tasks()
                                      .containingProject()
                                      ? Array.isArray(
                                          elm.tasks().containingProject()
                                        )
                                        ? elm
                                            .tasks()
                                            .containingProject()
                                            .map((elm) => {
                                              return {
                                                id: elm.id(),
                                                name: elm.name(),
                                              };
                                            })
                                        : {
                                            id: elm
                                              .tasks()
                                              .containingProject()
                                              .id(),
                                            name: elm
                                              .tasks()
                                              .containingProject()
                                              .name(),
                                          }
                                      : undefined,
                                    flagged: elm.tasks().flagged(),
                                  }
                              : undefined,
                          };
                        })
                      : {
                          tasks: elm.rootTask().tasks()
                            ? Array.isArray(elm.rootTask().tasks())
                              ? elm
                                  .rootTask()
                                  .tasks()
                                  .map((elm) => {
                                    return {
                                      name: elm.name(),
                                      id: elm.id(),
                                      effectiveDueDate: elm.effectiveDueDate(),
                                      completed: elm.completed(),
                                      effectivelyCompleted:
                                        elm.effectivelyCompleted(),
                                      containingProject: elm.containingProject()
                                        ? Array.isArray(elm.containingProject())
                                          ? elm
                                              .containingProject()
                                              .map((elm) => {
                                                return {
                                                  id: elm.id(),
                                                  name: elm.name(),
                                                };
                                              })
                                          : {
                                              id: elm.containingProject().id(),
                                              name: elm
                                                .containingProject()
                                                .name(),
                                            }
                                        : undefined,
                                      flagged: elm.flagged(),
                                    };
                                  })
                              : {
                                  name: elm.rootTask().tasks().name(),
                                  id: elm.rootTask().tasks().id(),
                                  effectiveDueDate: elm
                                    .rootTask()
                                    .tasks()
                                    .effectiveDueDate(),
                                  completed: elm.rootTask().tasks().completed(),
                                  effectivelyCompleted: elm
                                    .rootTask()
                                    .tasks()
                                    .effectivelyCompleted(),
                                  containingProject: elm
                                    .rootTask()
                                    .tasks()
                                    .containingProject()
                                    ? Array.isArray(
                                        elm
                                          .rootTask()
                                          .tasks()
                                          .containingProject()
                                      )
                                      ? elm
                                          .rootTask()
                                          .tasks()
                                          .containingProject()
                                          .map((elm) => {
                                            return {
                                              id: elm.id(),
                                              name: elm.name(),
                                            };
                                          })
                                      : {
                                          id: elm
                                            .rootTask()
                                            .tasks()
                                            .containingProject()
                                            .id(),
                                          name: elm
                                            .rootTask()
                                            .tasks()
                                            .containingProject()
                                            .name(),
                                        }
                                    : undefined,
                                  flagged: elm.rootTask().tasks().flagged(),
                                }
                            : undefined,
                        }
                    : undefined,
                };
              })
            : {
                rootTask: parent.byId().rootTask()
                  ? Array.isArray(parent.byId().rootTask())
                    ? parent
                        .byId()
                        .rootTask()
                        .map((elm) => {
                          return {
                            tasks: elm.tasks()
                              ? Array.isArray(elm.tasks())
                                ? elm.tasks().map((elm) => {
                                    return {
                                      name: elm.name(),
                                      id: elm.id(),
                                      effectiveDueDate: elm.effectiveDueDate(),
                                      completed: elm.completed(),
                                      effectivelyCompleted:
                                        elm.effectivelyCompleted(),
                                      containingProject: elm.containingProject()
                                        ? Array.isArray(elm.containingProject())
                                          ? elm
                                              .containingProject()
                                              .map((elm) => {
                                                return {
                                                  id: elm.id(),
                                                  name: elm.name(),
                                                };
                                              })
                                          : {
                                              id: elm.containingProject().id(),
                                              name: elm
                                                .containingProject()
                                                .name(),
                                            }
                                        : undefined,
                                      flagged: elm.flagged(),
                                    };
                                  })
                                : {
                                    name: elm.tasks().name(),
                                    id: elm.tasks().id(),
                                    effectiveDueDate: elm
                                      .tasks()
                                      .effectiveDueDate(),
                                    completed: elm.tasks().completed(),
                                    effectivelyCompleted: elm
                                      .tasks()
                                      .effectivelyCompleted(),
                                    containingProject: elm
                                      .tasks()
                                      .containingProject()
                                      ? Array.isArray(
                                          elm.tasks().containingProject()
                                        )
                                        ? elm
                                            .tasks()
                                            .containingProject()
                                            .map((elm) => {
                                              return {
                                                id: elm.id(),
                                                name: elm.name(),
                                              };
                                            })
                                        : {
                                            id: elm
                                              .tasks()
                                              .containingProject()
                                              .id(),
                                            name: elm
                                              .tasks()
                                              .containingProject()
                                              .name(),
                                          }
                                      : undefined,
                                    flagged: elm.tasks().flagged(),
                                  }
                              : undefined,
                          };
                        })
                    : {
                        tasks: parent.byId().rootTask().tasks()
                          ? Array.isArray(parent.byId().rootTask().tasks())
                            ? parent
                                .byId()
                                .rootTask()
                                .tasks()
                                .map((elm) => {
                                  return {
                                    name: elm.name(),
                                    id: elm.id(),
                                    effectiveDueDate: elm.effectiveDueDate(),
                                    completed: elm.completed(),
                                    effectivelyCompleted:
                                      elm.effectivelyCompleted(),
                                    containingProject: elm.containingProject()
                                      ? Array.isArray(elm.containingProject())
                                        ? elm.containingProject().map((elm) => {
                                            return {
                                              id: elm.id(),
                                              name: elm.name(),
                                            };
                                          })
                                        : {
                                            id: elm.containingProject().id(),
                                            name: elm
                                              .containingProject()
                                              .name(),
                                          }
                                      : undefined,
                                    flagged: elm.flagged(),
                                  };
                                })
                            : {
                                name: parent.byId().rootTask().tasks().name(),
                                id: parent.byId().rootTask().tasks().id(),
                                effectiveDueDate: parent
                                  .byId()
                                  .rootTask()
                                  .tasks()
                                  .effectiveDueDate(),
                                completed: parent
                                  .byId()
                                  .rootTask()
                                  .tasks()
                                  .completed(),
                                effectivelyCompleted: parent
                                  .byId()
                                  .rootTask()
                                  .tasks()
                                  .effectivelyCompleted(),
                                containingProject: parent
                                  .byId()
                                  .rootTask()
                                  .tasks()
                                  .containingProject()
                                  ? Array.isArray(
                                      parent
                                        .byId()
                                        .rootTask()
                                        .tasks()
                                        .containingProject()
                                    )
                                    ? parent
                                        .byId()
                                        .rootTask()
                                        .tasks()
                                        .containingProject()
                                        .map((elm) => {
                                          return {
                                            id: elm.id(),
                                            name: elm.name(),
                                          };
                                        })
                                    : {
                                        id: parent
                                          .byId()
                                          .rootTask()
                                          .tasks()
                                          .containingProject()
                                          .id(),
                                        name: parent
                                          .byId()
                                          .rootTask()
                                          .tasks()
                                          .containingProject()
                                          .name(),
                                      }
                                  : undefined,
                                flagged: parent
                                  .byId()
                                  .rootTask()
                                  .tasks()
                                  .flagged(),
                              }
                          : undefined,
                      }
                  : undefined,
              }
          : undefined,
      }
  : undefined;
"
`;

exports[`run for GetTasksInProjectDocument 1`] = `
Object {
  "byId": Object {
    "rootTask": Object {
      "tasks": Array [
        Object {
          "completed": false,
          "containingProject": Object {
            "id": "projectId",
            "name": "projectName",
          },
          "effectiveDueDate": null,
          "effectivelyCompleted": null,
          "flagged": false,
          "id": "bar",
          "name": "foo",
        },
      ],
    },
  },
}
`;
