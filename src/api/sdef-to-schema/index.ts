import { exec } from "child_process";
import { promisify } from "util";
import { parseStringPromise } from "xml2js";
import fs from "fs";
import {
  print,
  lexicographicSortSchema,
  ObjectTypeDefinitionNode,
  InterfaceTypeDefinitionNode,
  printSchema,
  buildASTSchema,
  ASTNode,
  DocumentNode,
} from "graphql";
import { join } from "path";
import { pruneSchema } from "@graphql-tools/utils";
import { Suite } from "./sdef";
import { ConnectionInterface, EdgeInterface, NodeInterface } from "./constants";
import prettier from "prettier";
import gql from "graphql-tag";
import { prune } from "./prune";
import { parseSuites } from "./suite";

const interfaces: InterfaceTypeDefinitionNode[] = [ConnectionInterface, EdgeInterface, NodeInterface];

(async (appPath: string, override?: DocumentNode) => {
  const sdef = await promisify(exec)(`sdef ${appPath}`);
  const parsed = (await parseStringPromise(sdef.stdout)) as {
    dictionary: { suite: Suite[] };
  };

  const { extensionRenderers, classRenderers, recordTypeRenderers, enumRenderers } = parseSuites(
    parsed.dictionary.suite
  );

  const extensions = extensionRenderers.map((e) => e.getType());
  const inheritedClasses = new Set(
    classRenderers.map((c) => c.getInherits()).filter((c): c is string => typeof c === "string")
  );

  const definitions: ObjectTypeDefinitionNode[] = [];
  classRenderers.forEach((cdef) => {
    const inherits = cdef.getInherits();
    const parent = classRenderers.find((t) => t.getClassName() === inherits);
    if (inherits !== undefined && parent === undefined) {
      throw new Error("parent not found");
    }
    interfaces.push(cdef.getInterfaced());
    definitions.push(
      ...cdef.getTypes({
        inherits: parent,
        inherited: inheritedClasses.has(cdef.getClassName()),
        extensions: extensionRenderers.filter((e) => e.extends === cdef.getClassName()),
        override,
      })
    );

    // TODO: less hard code
    if (cdef.getClassName() === "inbox task") {
      const m = cdef.getMutationExtension("push", parent);
      if (m === null) {
        return;
      }
      extensions.push(m);
    }
  });

  const enums = enumRenderers.map((e) => e.getType());
  const recordTypes = recordTypeRenderers.map((e) => e.getType());

  const render = (ns: ASTNode[]) => {
    return ns.map(print).join("\n");
  };

  const schema = gql`
    type Query {
      application: Application!
    }
    type Mutation

    ${render(definitions)}
    ${render(extensions)}
    ${render(interfaces)}
    ${render(recordTypes)}
    ${render(enums)}

    # https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
    type PageInfo {
      hasPreviousPage: Boolean!
      hasNextPage: Boolean!
      startCursor: String!
      endCursor: String!
    }

    directive @recordType on OBJECT

    input Condition {
      enabled: Boolean! = true
      field: String
      operands: [Condition!]
      operator: String! = "="
      value: String! = "true"
    }

    ${override ? print(override) : ""}
  `;

  const path = join(__dirname, "..", "..", "..", "assets", "schema.graphql");

  const sorted = lexicographicSortSchema(pruneSchema(buildASTSchema(prune(schema))));
  const sortedSchema = printSchema(sorted);
  const comment = `# Code generated by "sdef-to-schema"; DO NOT EDIT.\n`;

  fs.writeFile(path, prettier.format(comment + sortedSchema, { parser: "graphql" }), (err) => {
    if (err) {
      throw err;
    }
    console.log(`âœ… Schemad generated`);
  });
})(
  "/Applications/OmniFocus.app",
  gql`
    scalar RichText
  `
).catch((err) => {
  console.error(err);
});
