interface Connection {
  byId(id: String!): Node
  edges: [Edge!]!
  pageInfo: PageInfo!
}

interface Edge {
  cursor: String!
  node: Node!
}

type Folder implements Node {
  creationDate: String!
  effectivelyHidden: Boolean!
  folders: FolderConnection!
  hidden: Boolean!
  id: String!
  modificationDate: String!
  name: String!
  projects: ProjectConnection!
  sections: SectionConnection!
}

type FolderConnection implements Connection {
  byId(id: String!): Folder
  edges: [FolderEdge!]!
  pageInfo: PageInfo!
}

type FolderEdge implements Edge {
  cursor: String!
  node: Folder!
}

interface Node {
  id: String!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

type Project implements Node {
  blocked: Boolean!
  completed: Boolean!
  completedByChildren: Boolean!
  completionDate: String
  creationDate: String!
  defaultSingletonActionHolder: Boolean!
  deferDate: String
  dropped: Boolean!
  droppedDate: String
  dueDate: String
  effectiveDeferDate: String
  effectiveDueDate: String
  effectivelyCompleted: Boolean!
  effectivelyDropped: Boolean!
  flagged: Boolean!
  folder: Folder
  id: String!
  lastReviewDate: String!
  modificationDate: String!
  name: String!
  nextDeferDate: String
  nextDueDate: String
  nextReviewDate: String
  nextTask: Task
  primaryTag: Tag
  sequential: Boolean!
  shouldUseFloatingTimeZone: Boolean!
  singletonActionHolder: Boolean!
}

type ProjectConnection implements Connection {
  byId(id: String!): Project
  edges: [ProjectEdge!]!
  pageInfo: PageInfo!
}

type ProjectEdge implements Edge {
  cursor: String!
  node: Project!
}

type Section implements Node {
  id: String!
  name: String!
}

type SectionConnection implements Connection {
  byId(id: String!): Section
  edges: [SectionEdge!]!
  pageInfo: PageInfo!
}

type SectionEdge implements Edge {
  cursor: String!
  node: Section!
}

type Tag implements Node {
  allowsNextAction: Boolean!
  effectivelyHidden: Boolean!
  hidden: Boolean!
  id: String!
  name: String!
  tags: TagConnection!
  tasks: TaskConnection!
}

type TagConnection implements Connection {
  byId(id: String!): Tag
  edges: [TagEdge!]!
  pageInfo: PageInfo!
}

type TagEdge implements Edge {
  cursor: String!
  node: Tag!
}

type Task implements Node {
  blocked: Boolean!
  completed: Boolean!
  completedByChildren: Boolean!
  completionDate: String
  containingProject: Project
  creationDate: String!
  deferDate: String
  dropped: Boolean!
  droppedDate: String
  dueDate: String
  effectiveDeferDate: String
  effectiveDueDate: String
  effectivelyCompleted: Boolean!
  effectivelyDropped: Boolean!
  flagged: Boolean!
  id: String!
  inInbox: Boolean!
  modificationDate: String!
  name: String!
  next: Boolean!
  nextDeferDate: String
  nextDueDate: String
  parentTask: Task
  primaryTag: Tag
  sequential: Boolean!
  shouldUseFloatingTimeZone: Boolean!
  tags: TagConnection!
  tasks: TaskConnection!
}

type TaskConnection implements Connection {
  byId(id: String!): Task
  edges: [TaskEdge!]!
  pageInfo: PageInfo!
}

type TaskEdge implements Edge {
  cursor: String!
  node: Task!
}