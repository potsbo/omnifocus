# Code generated by "sdef-to-schema"; DO NOT EDIT.
directive @recordType on OBJECT

directive @whose(condition: [Condition!]!) on FIELD

"""
The application's top-level scripting object.
"""
type Application {
  """
  This is the build number of the application, for example 63.1 or 63.  Major and minor versions are separated by a dot.  So 63.10 comes after 63.1.
  """
  buildNumber: String!

  """
  The current time offset from a reference date. Useful for timing scripts.
  """
  currentTimeOffset: Float!

  """
  The user's default document.
  """
  defaultDocument: Document!
  documents: DocumentConnection!

  """
  Is this the active application?
  """
  frontmost: Boolean!

  """
  The name of the application.
  """
  name: String!

  """
  The names of all available perspectives in the default document.
  """
  perspectiveNames: [String!]!
  perspectives: PerspectiveConnection!

  """
  The date on from which the date collated smart groups are based.  When set, the reference date will be rounded to the first instant of the day of the specified date.
  """
  referenceDate: String!

  """
  The version number of the application.
  """
  version: String!
}

"""
A task that is available for action.  This is simply a filter on the existing tasks and should be considred a read-only element.  These cannot be created directly; instead create a normal task.
"""
type AvailableTask implements Node & TaskInterface {
  """
  True if the task has a task that must be completed prior to it being actionable.
  """
  blocked: Boolean!

  """
  True if the task is completed. Use the "mark complete" and "mark incomplete" commands to change a task's status.
  """
  completed: Boolean!

  """
  If true, complete when children are completed.
  """
  completedByChildren: Boolean!

  """
  The task's date of completion. This can only be modified on a completed task to backdate the completion date.
  """
  completionDate: String

  """
  The task's project, up however many levels of parent tasks.  Inbox tasks aren't considered contained by their provisionalliy assigned container, so if the task is actually an inbox task, this will be missing value.
  """
  containingProject: Project

  """
  When the task was created.  This can only be set when the object is still in the inserted state.  For objects created in the document, it can be passed with the creation properties.  For objects in a quick entry tree, it can be set until the quick entry panel is saved.
  """
  creationDate: String!

  """
  When the task should become available for action.
  """
  deferDate: String

  """
  True if the task is dropped. Use the "mark dropped" and "mark incomplete" commands to change a task's status.
  """
  dropped: Boolean!

  """
  The date the task was dropped. This can only be modified on a dropped task to backdate the dropped date.
  """
  droppedDate: String

  """
  When the task must be finished.
  """
  dueDate: String

  """
  When the task should become available for action (including inherited).
  """
  effectiveDeferDate: String

  """
  When the task must be finished (including inherited).
  """
  effectiveDueDate: String

  """
  True if the task is completed, or any of it's containing tasks or project are completed.
  """
  effectivelyCompleted: Boolean!

  """
  True if the task is dropped, or any of it's containing tasks or project are dropped.
  """
  effectivelyDropped: Boolean!

  """
  The estimated time, in whole minutes, that this task will take to finish.
  """
  estimatedMinutes: Int

  """
  True if flagged
  """
  flagged: Boolean!
  flattenedTasks: FlattenedTaskConnection!

  """
  The identifier of the task.
  """
  id: String!

  """
  Returns true if the task itself is an inbox task or if the task is contained by an inbox task.
  """
  inInbox: Boolean!

  """
  When the task was last modified.
  """
  modificationDate: String!

  """
  The name of the task.
  """
  name: String!

  """
  If the task is the next task of its containing project, next is true.
  """
  next: Boolean!

  """
  The next defer date if this task repeats on a fixed schedule and it has a defer date.
  """
  nextDeferDate: String

  """
  The next due date if this task repeats on a fixed schedule and it has a due date.
  """
  nextDueDate: String

  """
  The note of the task.
  """
  note: RichText!

  """
  The number of available direct children of this task.
  """
  numberOfAvailableTasks: Int!

  """
  The number of completed direct children of this task.
  """
  numberOfCompletedTasks: Int!

  """
  The number of direct children of this task.
  """
  numberOfTasks: Int!

  """
  The task holding this task.  If this is missing value, then this is a top level task -- either the root of a project or an inbox item.
  """
  parentTask: Task

  """
  The task's first tag. Setting this will remove the current first tag on the task, if any and move or add the new tag as the first tag on the task. Setting this to missing value will remove the current first tag and leave any other remaining tags.
  """
  primaryTag: Tag

  """
  The repetition interval of the task, or missing value if it does not repeat. This property is deprecated in favor of “repetition rule” and is here only for backwards compatibility with existing scripts.
  """
  repetition: RepetitionInterval

  """
  The repetition rule for this task, or missing value if it does not repeat.
  """
  repetitionRule: RepetitionRule

  """
  If true, any children are sequentially dependent.
  """
  sequential: Boolean!

  """
  When set, the due date and defer date properties will use floating time zones. (Note: if a Task has no due or defer dates assigned, this property will revert to the database’s default setting.)
  """
  shouldUseFloatingTimeZone: Boolean!

  """
  The tags assigned to this task.
  """
  tags: TagConnection!

  """
  The tasks having this task as their container.
  """
  tasks: TaskConnection!
}

type AvailableTaskConnection implements Connection {
  byId(id: String!): AvailableTask
  edges: [AvailableTaskEdge!]!
  pageInfo: PageInfo!
}

type AvailableTaskEdge implements Edge {
  cursor: String!
  node: AvailableTask!
}

"""
A built-in perspective.
"""
type BuiltinPerspective implements Node & PerspectiveInterface {
  """
  The identifier of the perspective.
  """
  id: String!

  """
  The name of the perspective.
  """
  name: String!
}

type BuiltinPerspectiveConnection implements Connection {
  byId(id: String!): BuiltinPerspective
  edges: [BuiltinPerspectiveEdge!]!
  pageInfo: PageInfo!
}

type BuiltinPerspectiveEdge implements Edge {
  cursor: String!
  node: BuiltinPerspective!
}

input Condition {
  enabled: Boolean! = true
  field: String
  operands: [Condition!]
  operator: String! = "="
  value: String! = "true"
}

interface Connection {
  byId(id: String!): Node
  edges: [Edge!]!
  pageInfo: PageInfo!
}

"""
A user created perspective.
"""
type CustomPerspective implements Node & PerspectiveInterface {
  """
  The identifier of the perspective.
  """
  id: String!

  """
  The name of the perspective.
  """
  name: String!
}

type CustomPerspectiveConnection implements Connection {
  byId(id: String!): CustomPerspective
  edges: [CustomPerspectiveEdge!]!
  pageInfo: PageInfo!
}

type CustomPerspectiveEdge implements Edge {
  cursor: String!
  node: CustomPerspective!
}

"""
A document.
"""
type Document implements Node {
  """
  Whether the document can redo the most recently undone command.
  """
  canRedo: Boolean!

  """
  Whether the document can undo the most recent command.
  """
  canUndo: Boolean!

  """
  Whether the document will write compressed transactions to disk; defaults to true.
  """
  compressesTransactions: Boolean!

  """
  If set, automatic cleanup of inbox items won't happen.
  """
  disableAutomaticInboxCleanup: Boolean!
  flattenedFolders: FlattenedFolderConnection!
  flattenedProjects: FlattenedProjectConnection!
  flattenedTags: FlattenedTagConnection!
  flattenedTasks: FlattenedTaskConnection!

  """
  The subset of the sections that are folders; folders having this folder as their container.
  """
  folders: FolderConnection!

  """
  The document's unique identifier.
  """
  id: String!
  inboxTasks: InboxTaskConnection!

  """
  Whether the document will write computed summary information when writing transactions.
  """
  includesSummaries: Boolean!

  """
  Date of the last sync.
  """
  lastSyncDate: String!

  """
  Error message (if any) for the last sync.
  """
  lastSyncError: String!

  """
  Has it been modified since the last save?
  """
  modified: Boolean!

  """
  Its name.
  """
  name: String!

  """
  The document's path on disk.
  """
  path: String!

  """
  The names of all available perspectives in this document.
  """
  perspectiveNames: [String!]!
  perspectives: PerspectiveConnection!

  """
  The subset of the sections that are projects; projects having this folder as their container.
  """
  projects: ProjectConnection!

  """
  The projects and folders contained by no folder.
  """
  sections: SectionConnection!
  settings: SettingConnection!

  """
  True if the document is currently syncing, false otherwise.
  """
  syncing: Boolean!

  """
  The top-level tags of the document.
  """
  tags: TagConnection!
  tasks: TaskConnection!

  """
  Whether the document will autosave.
  """
  willAutosave: Boolean!
}

type DocumentConnection implements Connection {
  byId(id: String!): Document
  edges: [DocumentEdge!]!
  pageInfo: PageInfo!
}

type DocumentEdge implements Edge {
  cursor: String!
  node: Document!
}

interface Edge {
  cursor: String!
  node: Node!
}

"""
A flattened list of folders in a document.
"""
type FlattenedFolder implements FolderInterface & Node {
  """
  When the folder was created.
  """
  creationDate: String!

  """
  Set if the folder is currently hidden or any of its container folders are hidden.
  """
  effectivelyHidden: Boolean!
  flattenedFolders: FlattenedFolderConnection!
  flattenedProjects: FlattenedProjectConnection!

  """
  The subset of the sections that are folders; folders having this folder as their container.
  """
  folders: FolderConnection!

  """
  Set if the folder is currently hidden.
  """
  hidden: Boolean!

  """
  The identifier of the folder.
  """
  id: String!

  """
  When the folder was last modified.
  """
  modificationDate: String!

  """
  The name of the folder.
  """
  name: String!

  """
  The note of the folder.
  """
  note: RichText!

  """
  The subset of the sections that are projects; projects having this folder as their container.
  """
  projects: ProjectConnection!

  """
  The projects and folders having this folder as their container.
  """
  sections: SectionConnection!
}

type FlattenedFolderConnection implements Connection {
  byId(id: String!): FlattenedFolder
  edges: [FlattenedFolderEdge!]!
  pageInfo: PageInfo!
}

type FlattenedFolderEdge implements Edge {
  cursor: String!
  node: FlattenedFolder!
}

"""
A flattened list of projects under a folder or document.
"""
type FlattenedProject implements Node & ProjectInterface {
  """
  True if the project has a project that must be completed prior to it being actionable.
  """
  blocked: Boolean!

  """
  True if the project is completed. Use the "mark complete" and "mark incomplete" commands to change a project's status.
  """
  completed: Boolean!

  """
  If true, complete when children are completed.
  """
  completedByChildren: Boolean!

  """
  The project's date of completion. This can only be modified on a completed project to backdate the completion date.
  """
  completionDate: String

  """
  When the project was created.  This can only be set when the object is still in the inserted state.  For objects created in the document, it can be passed with the creation properties.  For objects in a quick entry tree, it can be set until the quick entry panel is saved.
  """
  creationDate: String!

  """
  True if the project is the default holder of sington actions.  Only one project can have this flag set; setting it on a project will clear it on any other project having it.  Setting this to true will set 'singleton action holder' to true if not already so set.
  """
  defaultSingletonActionHolder: Boolean!

  """
  When the project should become available for action.
  """
  deferDate: String

  """
  True if the project is dropped. Use the "mark dropped" and "mark incomplete" commands to change a project's status.
  """
  dropped: Boolean!

  """
  The date the project was dropped. This can only be modified on a dropped project to backdate the dropped date.
  """
  droppedDate: String

  """
  When the project must be finished.
  """
  dueDate: String

  """
  When the project should become available for action (including inherited).
  """
  effectiveDeferDate: String

  """
  When the project must be finished (including inherited).
  """
  effectiveDueDate: String

  """
  The effective status of the project.
  """
  effectiveStatus: ProjectStatus!

  """
  True if the project is completed
  """
  effectivelyCompleted: Boolean!

  """
  True if the project is dropped
  """
  effectivelyDropped: Boolean!

  """
  The estimated time, in whole minutes, that this project will take to finish.
  """
  estimatedMinutes: Int

  """
  True if flagged
  """
  flagged: Boolean!

  """
  The folder of the project, or missing value if it is contained directly by the document.
  """
  folder: Folder

  """
  The identifier of the project.
  """
  id: String!

  """
  When the project was last reviewed.
  """
  lastReviewDate: String!

  """
  When the project was last modified.
  """
  modificationDate: String!

  """
  The name of the project.
  """
  name: String!

  """
  The next defer date if this project repeats on a fixed schedule and it has a defer date.
  """
  nextDeferDate: String

  """
  The next due date if this project repeats on a fixed schedule and it has a due date.
  """
  nextDueDate: String

  """
  When the project should next be reviewed. Setting this to missing value will set the review date based off the last review date and review interval.
  """
  nextReviewDate: String

  """
  The next actionable child of this project.
  """
  nextTask: Task

  """
  The note of the project.
  """
  note: RichText!

  """
  The number of available direct children of this project.
  """
  numberOfAvailableTasks: Int!

  """
  The number of completed direct children of this project.
  """
  numberOfCompletedTasks: Int!

  """
  The number of direct children of this project.
  """
  numberOfTasks: Int!

  """
  The project's first tag. Setting this will remove the current first tag on the project, if any and move or add the new tag as the first tag on the project. Setting this to missing value will remove the current first tag and leave any other remaining tags.
  """
  primaryTag: Tag

  """
  The repetition interval of the project, or missing value if it does not repeat. This property is deprecated in favor of “repetition rule” and is here only for backwards compatibility with existing scripts.
  """
  repetition: RepetitionInterval

  """
  The repetition rule for this project, or missing value if it does not repeat.
  """
  repetitionRule: RepetitionRule

  """
  The review interval for the project.
  """
  reviewInterval: RepetitionInterval!

  """
  The root task of this project, holding the project's name, note, dates and child tasks.
  """
  rootTask: Task!

  """
  If true, any children are sequentially dependent.
  """
  sequential: Boolean!

  """
  When set, the due date and defer date properties will use floating time zones. (Note: if a Task has no due or defer dates assigned, this property will revert to the database’s default setting.)
  """
  shouldUseFloatingTimeZone: Boolean!

  """
  True if the project contains singleton actions.
  """
  singletonActionHolder: Boolean!

  """
  The status of the project.
  """
  status: ProjectStatus!
}

type FlattenedProjectConnection implements Connection {
  byId(id: String!): FlattenedProject
  edges: [FlattenedProjectEdge!]!
  pageInfo: PageInfo!
}

type FlattenedProjectEdge implements Edge {
  cursor: String!
  node: FlattenedProject!
}

"""
A flattened list of tags in a document.
"""
type FlattenedTag implements Node & TagInterface {
  """
  If false, tasks associated with this tag will be skipped when determining the next action for a project.
  """
  allowsNextAction: Boolean!

  """
  A count of the number of unblocked and incomplete tasks of this tag and all its active descendent tags.
  """
  availableTaskCount: Int!
  availableTasks: AvailableTaskConnection!

  """
  The containing tag.
  """
  container: Tag!

  """
  Set if the tag is currently hidden or any of its container tags are hidden.
  """
  effectivelyHidden: Boolean!
  flattenedTags: FlattenedTagConnection!

  """
  Set if the tag is currently hidden.
  """
  hidden: Boolean!

  """
  The identifier of the tag.
  """
  id: String!

  """
  The physical location associated with the tag.
  """
  location: LocationInformation

  """
  The name of the tag.
  """
  name: String!

  """
  The note of the tag.
  """
  note: RichText!

  """
  A count of the number of incomplete tasks of this tag and all its active descendent tags.
  """
  remainingTaskCount: Int!
  remainingTasks: RemainingTaskConnection!

  """
  The tags having this tag as their container.
  """
  tags: TagConnection!

  """
  The tasks having this tag.
  """
  tasks: TaskConnection!
}

type FlattenedTagConnection implements Connection {
  byId(id: String!): FlattenedTag
  edges: [FlattenedTagEdge!]!
  pageInfo: PageInfo!
}

type FlattenedTagEdge implements Edge {
  cursor: String!
  node: FlattenedTag!
}

"""
A flattened list of tasks under a task or document.
"""
type FlattenedTask implements Node & TaskInterface {
  """
  True if the task has a task that must be completed prior to it being actionable.
  """
  blocked: Boolean!

  """
  True if the task is completed. Use the "mark complete" and "mark incomplete" commands to change a task's status.
  """
  completed: Boolean!

  """
  If true, complete when children are completed.
  """
  completedByChildren: Boolean!

  """
  The task's date of completion. This can only be modified on a completed task to backdate the completion date.
  """
  completionDate: String

  """
  The task's project, up however many levels of parent tasks.  Inbox tasks aren't considered contained by their provisionalliy assigned container, so if the task is actually an inbox task, this will be missing value.
  """
  containingProject: Project

  """
  When the task was created.  This can only be set when the object is still in the inserted state.  For objects created in the document, it can be passed with the creation properties.  For objects in a quick entry tree, it can be set until the quick entry panel is saved.
  """
  creationDate: String!

  """
  When the task should become available for action.
  """
  deferDate: String

  """
  True if the task is dropped. Use the "mark dropped" and "mark incomplete" commands to change a task's status.
  """
  dropped: Boolean!

  """
  The date the task was dropped. This can only be modified on a dropped task to backdate the dropped date.
  """
  droppedDate: String

  """
  When the task must be finished.
  """
  dueDate: String

  """
  When the task should become available for action (including inherited).
  """
  effectiveDeferDate: String

  """
  When the task must be finished (including inherited).
  """
  effectiveDueDate: String

  """
  True if the task is completed, or any of it's containing tasks or project are completed.
  """
  effectivelyCompleted: Boolean!

  """
  True if the task is dropped, or any of it's containing tasks or project are dropped.
  """
  effectivelyDropped: Boolean!

  """
  The estimated time, in whole minutes, that this task will take to finish.
  """
  estimatedMinutes: Int

  """
  True if flagged
  """
  flagged: Boolean!
  flattenedTasks: FlattenedTaskConnection!

  """
  The identifier of the task.
  """
  id: String!

  """
  Returns true if the task itself is an inbox task or if the task is contained by an inbox task.
  """
  inInbox: Boolean!

  """
  When the task was last modified.
  """
  modificationDate: String!

  """
  The name of the task.
  """
  name: String!

  """
  If the task is the next task of its containing project, next is true.
  """
  next: Boolean!

  """
  The next defer date if this task repeats on a fixed schedule and it has a defer date.
  """
  nextDeferDate: String

  """
  The next due date if this task repeats on a fixed schedule and it has a due date.
  """
  nextDueDate: String

  """
  The note of the task.
  """
  note: RichText!

  """
  The number of available direct children of this task.
  """
  numberOfAvailableTasks: Int!

  """
  The number of completed direct children of this task.
  """
  numberOfCompletedTasks: Int!

  """
  The number of direct children of this task.
  """
  numberOfTasks: Int!

  """
  The task holding this task.  If this is missing value, then this is a top level task -- either the root of a project or an inbox item.
  """
  parentTask: Task

  """
  The task's first tag. Setting this will remove the current first tag on the task, if any and move or add the new tag as the first tag on the task. Setting this to missing value will remove the current first tag and leave any other remaining tags.
  """
  primaryTag: Tag

  """
  The repetition interval of the task, or missing value if it does not repeat. This property is deprecated in favor of “repetition rule” and is here only for backwards compatibility with existing scripts.
  """
  repetition: RepetitionInterval

  """
  The repetition rule for this task, or missing value if it does not repeat.
  """
  repetitionRule: RepetitionRule

  """
  If true, any children are sequentially dependent.
  """
  sequential: Boolean!

  """
  When set, the due date and defer date properties will use floating time zones. (Note: if a Task has no due or defer dates assigned, this property will revert to the database’s default setting.)
  """
  shouldUseFloatingTimeZone: Boolean!

  """
  The tags assigned to this task.
  """
  tags: TagConnection!

  """
  The tasks having this task as their container.
  """
  tasks: TaskConnection!
}

type FlattenedTaskConnection implements Connection {
  byId(id: String!): FlattenedTask
  edges: [FlattenedTaskEdge!]!
  pageInfo: PageInfo!
}

type FlattenedTaskEdge implements Edge {
  cursor: String!
  node: FlattenedTask!
}

"""
A group of projects and sub-folders representing an area of responsibility.
"""
type Folder implements FolderInterface & Node & SectionInterface {
  """
  When the folder was created.
  """
  creationDate: String!

  """
  Set if the folder is currently hidden or any of its container folders are hidden.
  """
  effectivelyHidden: Boolean!
  flattenedFolders: FlattenedFolderConnection!
  flattenedProjects: FlattenedProjectConnection!

  """
  The subset of the sections that are folders; folders having this folder as their container.
  """
  folders: FolderConnection!

  """
  Set if the folder is currently hidden.
  """
  hidden: Boolean!

  """
  The identifier of the folder.
  """
  id: String!

  """
  When the folder was last modified.
  """
  modificationDate: String!

  """
  The name of the folder.
  """
  name: String!

  """
  The note of the folder.
  """
  note: RichText!

  """
  The subset of the sections that are projects; projects having this folder as their container.
  """
  projects: ProjectConnection!

  """
  The projects and folders having this folder as their container.
  """
  sections: SectionConnection!
}

type FolderConnection implements Connection {
  byId(id: String!): FolderInterface
  edges: [FolderEdge!]!
  pageInfo: PageInfo!
}

type FolderEdge implements Edge {
  cursor: String!
  node: FolderInterface!
}

interface FolderInterface implements Node {
  """
  When the folder was created.
  """
  creationDate: String!

  """
  Set if the folder is currently hidden or any of its container folders are hidden.
  """
  effectivelyHidden: Boolean!
  flattenedFolders: FlattenedFolderConnection!
  flattenedProjects: FlattenedProjectConnection!

  """
  The subset of the sections that are folders; folders having this folder as their container.
  """
  folders: FolderConnection!

  """
  Set if the folder is currently hidden.
  """
  hidden: Boolean!

  """
  The identifier of the folder.
  """
  id: String!

  """
  When the folder was last modified.
  """
  modificationDate: String!

  """
  The name of the folder.
  """
  name: String!

  """
  The note of the folder.
  """
  note: RichText!

  """
  The subset of the sections that are projects; projects having this folder as their container.
  """
  projects: ProjectConnection!

  """
  The projects and folders having this folder as their container.
  """
  sections: SectionConnection!
}

"""
A task that is in the document's inbox
"""
type InboxTask implements Node & TaskInterface {
  """
  True if the task has a task that must be completed prior to it being actionable.
  """
  blocked: Boolean!

  """
  True if the task is completed. Use the "mark complete" and "mark incomplete" commands to change a task's status.
  """
  completed: Boolean!

  """
  If true, complete when children are completed.
  """
  completedByChildren: Boolean!

  """
  The task's date of completion. This can only be modified on a completed task to backdate the completion date.
  """
  completionDate: String

  """
  The task's project, up however many levels of parent tasks.  Inbox tasks aren't considered contained by their provisionalliy assigned container, so if the task is actually an inbox task, this will be missing value.
  """
  containingProject: Project

  """
  When the task was created.  This can only be set when the object is still in the inserted state.  For objects created in the document, it can be passed with the creation properties.  For objects in a quick entry tree, it can be set until the quick entry panel is saved.
  """
  creationDate: String!

  """
  When the task should become available for action.
  """
  deferDate: String

  """
  True if the task is dropped. Use the "mark dropped" and "mark incomplete" commands to change a task's status.
  """
  dropped: Boolean!

  """
  The date the task was dropped. This can only be modified on a dropped task to backdate the dropped date.
  """
  droppedDate: String

  """
  When the task must be finished.
  """
  dueDate: String

  """
  When the task should become available for action (including inherited).
  """
  effectiveDeferDate: String

  """
  When the task must be finished (including inherited).
  """
  effectiveDueDate: String

  """
  True if the task is completed, or any of it's containing tasks or project are completed.
  """
  effectivelyCompleted: Boolean!

  """
  True if the task is dropped, or any of it's containing tasks or project are dropped.
  """
  effectivelyDropped: Boolean!

  """
  The estimated time, in whole minutes, that this task will take to finish.
  """
  estimatedMinutes: Int

  """
  True if flagged
  """
  flagged: Boolean!
  flattenedTasks: FlattenedTaskConnection!

  """
  The identifier of the task.
  """
  id: String!

  """
  Returns true if the task itself is an inbox task or if the task is contained by an inbox task.
  """
  inInbox: Boolean!

  """
  When the task was last modified.
  """
  modificationDate: String!

  """
  The name of the task.
  """
  name: String!

  """
  If the task is the next task of its containing project, next is true.
  """
  next: Boolean!

  """
  The next defer date if this task repeats on a fixed schedule and it has a defer date.
  """
  nextDeferDate: String

  """
  The next due date if this task repeats on a fixed schedule and it has a due date.
  """
  nextDueDate: String

  """
  The note of the task.
  """
  note: RichText!

  """
  The number of available direct children of this task.
  """
  numberOfAvailableTasks: Int!

  """
  The number of completed direct children of this task.
  """
  numberOfCompletedTasks: Int!

  """
  The number of direct children of this task.
  """
  numberOfTasks: Int!

  """
  The task holding this task.  If this is missing value, then this is a top level task -- either the root of a project or an inbox item.
  """
  parentTask: Task

  """
  The task's first tag. Setting this will remove the current first tag on the task, if any and move or add the new tag as the first tag on the task. Setting this to missing value will remove the current first tag and leave any other remaining tags.
  """
  primaryTag: Tag

  """
  The repetition interval of the task, or missing value if it does not repeat. This property is deprecated in favor of “repetition rule” and is here only for backwards compatibility with existing scripts.
  """
  repetition: RepetitionInterval

  """
  The repetition rule for this task, or missing value if it does not repeat.
  """
  repetitionRule: RepetitionRule

  """
  If true, any children are sequentially dependent.
  """
  sequential: Boolean!

  """
  When set, the due date and defer date properties will use floating time zones. (Note: if a Task has no due or defer dates assigned, this property will revert to the database’s default setting.)
  """
  shouldUseFloatingTimeZone: Boolean!

  """
  The tags assigned to this task.
  """
  tags: TagConnection!

  """
  The tasks having this task as their container.
  """
  tasks: TaskConnection!
}

type InboxTaskConnection implements Connection {
  byId(id: String!): InboxTask
  edges: [InboxTaskEdge!]!
  pageInfo: PageInfo!
}

type InboxTaskEdge implements Edge {
  cursor: String!
  node: InboxTask!
}

enum IntervalUnit {
  """
  Days
  """
  DAY

  """
  Hours
  """
  HOUR

  """
  Minutes
  """
  MINUTE

  """
  Months
  """
  MONTH

  """
  Weeks
  """
  WEEK

  """
  Years
  """
  YEAR
}

type LocationInformation @recordType {
  """
  Altitude in meters from sea level.
  """
  altitude: Float!

  """
  Latitude in degrees from -90 to +90.
  """
  latitude: Float!

  """
  Longitude in degrees from -180 to +180.
  """
  longitude: Float!

  """
  A display name for the location.
  """
  name: String!

  """
  Radius of accuracy in kilometers, from 0.1km to 10km.
  """
  radius: Float!

  """
  Location notification trigger.
  """
  trigger: LocationTrigger!
}

enum LocationTrigger {
  """
  notify when arriving at this location
  """
  NOTIFY_WHEN_ARRIVING

  """
  notify when leaving this location
  """
  NOTIFY_WHEN_LEAVING
}

type Mutation {
  pushInboxTask(
    completionDate: String
    deferDate: String
    droppedDate: String
    dueDate: String
    estimatedMinutes: Int
    name: String!
  ): InboxTask!
}

interface Node {
  id: String!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

"""
A perspective.
"""
type Perspective implements Node & PerspectiveInterface {
  """
  The identifier of the perspective.
  """
  id: String!

  """
  The name of the perspective.
  """
  name: String!
}

type PerspectiveConnection implements Connection {
  byId(id: String!): PerspectiveInterface
  edges: [PerspectiveEdge!]!
  pageInfo: PageInfo!
}

type PerspectiveEdge implements Edge {
  cursor: String!
  node: PerspectiveInterface!
}

interface PerspectiveInterface implements Node {
  """
  The identifier of the perspective.
  """
  id: String!

  """
  The name of the perspective.
  """
  name: String!
}

"""
A project.
"""
type Project implements Node & ProjectInterface & SectionInterface {
  """
  True if the project has a project that must be completed prior to it being actionable.
  """
  blocked: Boolean!

  """
  True if the project is completed. Use the "mark complete" and "mark incomplete" commands to change a project's status.
  """
  completed: Boolean!

  """
  If true, complete when children are completed.
  """
  completedByChildren: Boolean!

  """
  The project's date of completion. This can only be modified on a completed project to backdate the completion date.
  """
  completionDate: String

  """
  When the project was created.  This can only be set when the object is still in the inserted state.  For objects created in the document, it can be passed with the creation properties.  For objects in a quick entry tree, it can be set until the quick entry panel is saved.
  """
  creationDate: String!

  """
  True if the project is the default holder of sington actions.  Only one project can have this flag set; setting it on a project will clear it on any other project having it.  Setting this to true will set 'singleton action holder' to true if not already so set.
  """
  defaultSingletonActionHolder: Boolean!

  """
  When the project should become available for action.
  """
  deferDate: String

  """
  True if the project is dropped. Use the "mark dropped" and "mark incomplete" commands to change a project's status.
  """
  dropped: Boolean!

  """
  The date the project was dropped. This can only be modified on a dropped project to backdate the dropped date.
  """
  droppedDate: String

  """
  When the project must be finished.
  """
  dueDate: String

  """
  When the project should become available for action (including inherited).
  """
  effectiveDeferDate: String

  """
  When the project must be finished (including inherited).
  """
  effectiveDueDate: String

  """
  The effective status of the project.
  """
  effectiveStatus: ProjectStatus!

  """
  True if the project is completed
  """
  effectivelyCompleted: Boolean!

  """
  True if the project is dropped
  """
  effectivelyDropped: Boolean!

  """
  The estimated time, in whole minutes, that this project will take to finish.
  """
  estimatedMinutes: Int

  """
  True if flagged
  """
  flagged: Boolean!

  """
  The folder of the project, or missing value if it is contained directly by the document.
  """
  folder: Folder

  """
  The identifier of the project.
  """
  id: String!

  """
  When the project was last reviewed.
  """
  lastReviewDate: String!

  """
  When the project was last modified.
  """
  modificationDate: String!

  """
  The name of the project.
  """
  name: String!

  """
  The next defer date if this project repeats on a fixed schedule and it has a defer date.
  """
  nextDeferDate: String

  """
  The next due date if this project repeats on a fixed schedule and it has a due date.
  """
  nextDueDate: String

  """
  When the project should next be reviewed. Setting this to missing value will set the review date based off the last review date and review interval.
  """
  nextReviewDate: String

  """
  The next actionable child of this project.
  """
  nextTask: Task

  """
  The note of the project.
  """
  note: RichText!

  """
  The number of available direct children of this project.
  """
  numberOfAvailableTasks: Int!

  """
  The number of completed direct children of this project.
  """
  numberOfCompletedTasks: Int!

  """
  The number of direct children of this project.
  """
  numberOfTasks: Int!

  """
  The project's first tag. Setting this will remove the current first tag on the project, if any and move or add the new tag as the first tag on the project. Setting this to missing value will remove the current first tag and leave any other remaining tags.
  """
  primaryTag: Tag

  """
  The repetition interval of the project, or missing value if it does not repeat. This property is deprecated in favor of “repetition rule” and is here only for backwards compatibility with existing scripts.
  """
  repetition: RepetitionInterval

  """
  The repetition rule for this project, or missing value if it does not repeat.
  """
  repetitionRule: RepetitionRule

  """
  The review interval for the project.
  """
  reviewInterval: RepetitionInterval!

  """
  The root task of this project, holding the project's name, note, dates and child tasks.
  """
  rootTask: Task!

  """
  If true, any children are sequentially dependent.
  """
  sequential: Boolean!

  """
  When set, the due date and defer date properties will use floating time zones. (Note: if a Task has no due or defer dates assigned, this property will revert to the database’s default setting.)
  """
  shouldUseFloatingTimeZone: Boolean!

  """
  True if the project contains singleton actions.
  """
  singletonActionHolder: Boolean!

  """
  The status of the project.
  """
  status: ProjectStatus!
}

type ProjectConnection implements Connection {
  byId(id: String!): ProjectInterface
  edges: [ProjectEdge!]!
  pageInfo: PageInfo!
}

type ProjectEdge implements Edge {
  cursor: String!
  node: ProjectInterface!
}

interface ProjectInterface implements Node {
  """
  True if the project has a project that must be completed prior to it being actionable.
  """
  blocked: Boolean!

  """
  True if the project is completed. Use the "mark complete" and "mark incomplete" commands to change a project's status.
  """
  completed: Boolean!

  """
  If true, complete when children are completed.
  """
  completedByChildren: Boolean!

  """
  The project's date of completion. This can only be modified on a completed project to backdate the completion date.
  """
  completionDate: String

  """
  When the project was created.  This can only be set when the object is still in the inserted state.  For objects created in the document, it can be passed with the creation properties.  For objects in a quick entry tree, it can be set until the quick entry panel is saved.
  """
  creationDate: String!

  """
  True if the project is the default holder of sington actions.  Only one project can have this flag set; setting it on a project will clear it on any other project having it.  Setting this to true will set 'singleton action holder' to true if not already so set.
  """
  defaultSingletonActionHolder: Boolean!

  """
  When the project should become available for action.
  """
  deferDate: String

  """
  True if the project is dropped. Use the "mark dropped" and "mark incomplete" commands to change a project's status.
  """
  dropped: Boolean!

  """
  The date the project was dropped. This can only be modified on a dropped project to backdate the dropped date.
  """
  droppedDate: String

  """
  When the project must be finished.
  """
  dueDate: String

  """
  When the project should become available for action (including inherited).
  """
  effectiveDeferDate: String

  """
  When the project must be finished (including inherited).
  """
  effectiveDueDate: String

  """
  The effective status of the project.
  """
  effectiveStatus: ProjectStatus!

  """
  True if the project is completed
  """
  effectivelyCompleted: Boolean!

  """
  True if the project is dropped
  """
  effectivelyDropped: Boolean!

  """
  The estimated time, in whole minutes, that this project will take to finish.
  """
  estimatedMinutes: Int

  """
  True if flagged
  """
  flagged: Boolean!

  """
  The folder of the project, or missing value if it is contained directly by the document.
  """
  folder: Folder

  """
  The identifier of the project.
  """
  id: String!

  """
  When the project was last reviewed.
  """
  lastReviewDate: String!

  """
  When the project was last modified.
  """
  modificationDate: String!

  """
  The name of the project.
  """
  name: String!

  """
  The next defer date if this project repeats on a fixed schedule and it has a defer date.
  """
  nextDeferDate: String

  """
  The next due date if this project repeats on a fixed schedule and it has a due date.
  """
  nextDueDate: String

  """
  When the project should next be reviewed. Setting this to missing value will set the review date based off the last review date and review interval.
  """
  nextReviewDate: String

  """
  The next actionable child of this project.
  """
  nextTask: Task

  """
  The note of the project.
  """
  note: RichText!

  """
  The number of available direct children of this project.
  """
  numberOfAvailableTasks: Int!

  """
  The number of completed direct children of this project.
  """
  numberOfCompletedTasks: Int!

  """
  The number of direct children of this project.
  """
  numberOfTasks: Int!

  """
  The project's first tag. Setting this will remove the current first tag on the project, if any and move or add the new tag as the first tag on the project. Setting this to missing value will remove the current first tag and leave any other remaining tags.
  """
  primaryTag: Tag

  """
  The repetition interval of the project, or missing value if it does not repeat. This property is deprecated in favor of “repetition rule” and is here only for backwards compatibility with existing scripts.
  """
  repetition: RepetitionInterval

  """
  The repetition rule for this project, or missing value if it does not repeat.
  """
  repetitionRule: RepetitionRule

  """
  The review interval for the project.
  """
  reviewInterval: RepetitionInterval!

  """
  The root task of this project, holding the project's name, note, dates and child tasks.
  """
  rootTask: Task!

  """
  If true, any children are sequentially dependent.
  """
  sequential: Boolean!

  """
  When set, the due date and defer date properties will use floating time zones. (Note: if a Task has no due or defer dates assigned, this property will revert to the database’s default setting.)
  """
  shouldUseFloatingTimeZone: Boolean!

  """
  True if the project contains singleton actions.
  """
  singletonActionHolder: Boolean!

  """
  The status of the project.
  """
  status: ProjectStatus!
}

enum ProjectStatus {
  """
  Active
  """
  ACTIVE_STATUS

  """
  Done
  """
  DONE_STATUS

  """
  Dropped
  """
  DROPPED_STATUS

  """
  On Hold
  """
  ON_HOLD_STATUS
}

type Query {
  application: Application!
}

"""
A task that is not complete, though it may be blocked.  This is simply a filter on the existing tasks and should be considred a read-only element.  These cannot be created directly; instead create a normal task.
"""
type RemainingTask implements Node & TaskInterface {
  """
  True if the task has a task that must be completed prior to it being actionable.
  """
  blocked: Boolean!

  """
  True if the task is completed. Use the "mark complete" and "mark incomplete" commands to change a task's status.
  """
  completed: Boolean!

  """
  If true, complete when children are completed.
  """
  completedByChildren: Boolean!

  """
  The task's date of completion. This can only be modified on a completed task to backdate the completion date.
  """
  completionDate: String

  """
  The task's project, up however many levels of parent tasks.  Inbox tasks aren't considered contained by their provisionalliy assigned container, so if the task is actually an inbox task, this will be missing value.
  """
  containingProject: Project

  """
  When the task was created.  This can only be set when the object is still in the inserted state.  For objects created in the document, it can be passed with the creation properties.  For objects in a quick entry tree, it can be set until the quick entry panel is saved.
  """
  creationDate: String!

  """
  When the task should become available for action.
  """
  deferDate: String

  """
  True if the task is dropped. Use the "mark dropped" and "mark incomplete" commands to change a task's status.
  """
  dropped: Boolean!

  """
  The date the task was dropped. This can only be modified on a dropped task to backdate the dropped date.
  """
  droppedDate: String

  """
  When the task must be finished.
  """
  dueDate: String

  """
  When the task should become available for action (including inherited).
  """
  effectiveDeferDate: String

  """
  When the task must be finished (including inherited).
  """
  effectiveDueDate: String

  """
  True if the task is completed, or any of it's containing tasks or project are completed.
  """
  effectivelyCompleted: Boolean!

  """
  True if the task is dropped, or any of it's containing tasks or project are dropped.
  """
  effectivelyDropped: Boolean!

  """
  The estimated time, in whole minutes, that this task will take to finish.
  """
  estimatedMinutes: Int

  """
  True if flagged
  """
  flagged: Boolean!
  flattenedTasks: FlattenedTaskConnection!

  """
  The identifier of the task.
  """
  id: String!

  """
  Returns true if the task itself is an inbox task or if the task is contained by an inbox task.
  """
  inInbox: Boolean!

  """
  When the task was last modified.
  """
  modificationDate: String!

  """
  The name of the task.
  """
  name: String!

  """
  If the task is the next task of its containing project, next is true.
  """
  next: Boolean!

  """
  The next defer date if this task repeats on a fixed schedule and it has a defer date.
  """
  nextDeferDate: String

  """
  The next due date if this task repeats on a fixed schedule and it has a due date.
  """
  nextDueDate: String

  """
  The note of the task.
  """
  note: RichText!

  """
  The number of available direct children of this task.
  """
  numberOfAvailableTasks: Int!

  """
  The number of completed direct children of this task.
  """
  numberOfCompletedTasks: Int!

  """
  The number of direct children of this task.
  """
  numberOfTasks: Int!

  """
  The task holding this task.  If this is missing value, then this is a top level task -- either the root of a project or an inbox item.
  """
  parentTask: Task

  """
  The task's first tag. Setting this will remove the current first tag on the task, if any and move or add the new tag as the first tag on the task. Setting this to missing value will remove the current first tag and leave any other remaining tags.
  """
  primaryTag: Tag

  """
  The repetition interval of the task, or missing value if it does not repeat. This property is deprecated in favor of “repetition rule” and is here only for backwards compatibility with existing scripts.
  """
  repetition: RepetitionInterval

  """
  The repetition rule for this task, or missing value if it does not repeat.
  """
  repetitionRule: RepetitionRule

  """
  If true, any children are sequentially dependent.
  """
  sequential: Boolean!

  """
  When set, the due date and defer date properties will use floating time zones. (Note: if a Task has no due or defer dates assigned, this property will revert to the database’s default setting.)
  """
  shouldUseFloatingTimeZone: Boolean!

  """
  The tags assigned to this task.
  """
  tags: TagConnection!

  """
  The tasks having this task as their container.
  """
  tasks: TaskConnection!
}

type RemainingTaskConnection implements Connection {
  byId(id: String!): RemainingTask
  edges: [RemainingTaskEdge!]!
  pageInfo: PageInfo!
}

type RemainingTaskEdge implements Edge {
  cursor: String!
  node: RemainingTask!
}

type RepetitionInterval @recordType {
  """
  If fixed, the next repetition will be relative to a fixed calendar.  If sliding, the next repetition will be calculated when needed.
  """
  fixed: Boolean!

  """
  The count of the repetition interval.
  """
  steps: Int!

  """
  The units of the repetition interval.
  """
  unit: IntervalUnit!
}

enum RepetitionMethod {
  """
  Due again after completion.
  """
  DUE_AFTER_COMPLETION

  """
  Repeat on a fixed schedule.
  """
  FIXED_REPETITION

  """
  Start again after completion.
  """
  START_AFTER_COMPLETION
}

type RepetitionRule @recordType {
  """
  The iCalendar (RFC 2445) string describing the recurrence.
  """
  recurrence: String!

  """
  The repetition method. If fixed, the next repetition will be relative to a fixed calendar.  If sliding, the next repetition will be calculated when the action or inbox item is resolved.
  """
  repetitionMethod: RepetitionMethod!
}

"""
Rich (styled) text
"""
type RichText implements RichTextInterface {
  """
  Alignment of the text.
  """
  alignment: TextAlignment!

  """
  Number of pixels shifted above or below the normal baseline.
  """
  baselineOffset: Float!

  """
  The name of the font of the first character.
  """
  font: String!

  """
  The size in points of the first character.
  """
  size: Int!

  """
  The superscript level of the text.
  """
  superscript: Int!

  """
  The plain text contents of the rich text.
  """
  text: String!

  """
  Is the first character underlined?
  """
  underlined: Boolean!
}

interface RichTextInterface {
  """
  The name of the font of the first character.
  """
  font: String!

  """
  The size in points of the first character.
  """
  size: Int!

  """
  The plain text contents of the rich text.
  """
  text: String!
}

"""
A portion of a folder or document; either a project or a folder.
"""
type Section implements Node & SectionInterface {
  """
  The identifier of the project or folder.
  """
  id: String!

  """
  The name of the project or folder.
  """
  name: String!
}

type SectionConnection implements Connection {
  byId(id: String!): SectionInterface
  edges: [SectionEdge!]!
  pageInfo: PageInfo!
}

type SectionEdge implements Edge {
  cursor: String!
  node: SectionInterface!
}

interface SectionInterface implements Node {
  """
  The identifier of the project or folder.
  """
  id: String!

  """
  The name of the project or folder.
  """
  name: String!
}

"""
Document setting
"""
type Setting implements Node {
  """
  The identifier of the setting.
  """
  id: String!
}

type SettingConnection implements Connection {
  byId(id: String!): Setting
  edges: [SettingEdge!]!
  pageInfo: PageInfo!
}

type SettingEdge implements Edge {
  cursor: String!
  node: Setting!
}

interface SettingInterface implements Node {
  """
  The identifier of the setting.
  """
  id: String!
}

"""
A tag.
"""
type Tag implements Node & TagInterface {
  """
  If false, tasks associated with this tag will be skipped when determining the next action for a project.
  """
  allowsNextAction: Boolean!

  """
  A count of the number of unblocked and incomplete tasks of this tag and all its active descendent tags.
  """
  availableTaskCount: Int!
  availableTasks: AvailableTaskConnection!

  """
  The containing tag.
  """
  container: Tag!

  """
  Set if the tag is currently hidden or any of its container tags are hidden.
  """
  effectivelyHidden: Boolean!
  flattenedTags: FlattenedTagConnection!

  """
  Set if the tag is currently hidden.
  """
  hidden: Boolean!

  """
  The identifier of the tag.
  """
  id: String!

  """
  The physical location associated with the tag.
  """
  location: LocationInformation

  """
  The name of the tag.
  """
  name: String!

  """
  The note of the tag.
  """
  note: RichText!

  """
  A count of the number of incomplete tasks of this tag and all its active descendent tags.
  """
  remainingTaskCount: Int!
  remainingTasks: RemainingTaskConnection!

  """
  The tags having this tag as their container.
  """
  tags: TagConnection!

  """
  The tasks having this tag.
  """
  tasks: TaskConnection!
}

type TagConnection implements Connection {
  byId(id: String!): TagInterface
  edges: [TagEdge!]!
  pageInfo: PageInfo!
}

type TagEdge implements Edge {
  cursor: String!
  node: TagInterface!
}

interface TagInterface implements Node {
  """
  If false, tasks associated with this tag will be skipped when determining the next action for a project.
  """
  allowsNextAction: Boolean!

  """
  A count of the number of unblocked and incomplete tasks of this tag and all its active descendent tags.
  """
  availableTaskCount: Int!
  availableTasks: AvailableTaskConnection!

  """
  The containing tag.
  """
  container: Tag!

  """
  Set if the tag is currently hidden or any of its container tags are hidden.
  """
  effectivelyHidden: Boolean!
  flattenedTags: FlattenedTagConnection!

  """
  Set if the tag is currently hidden.
  """
  hidden: Boolean!

  """
  The identifier of the tag.
  """
  id: String!

  """
  The physical location associated with the tag.
  """
  location: LocationInformation

  """
  The name of the tag.
  """
  name: String!

  """
  The note of the tag.
  """
  note: RichText!

  """
  A count of the number of incomplete tasks of this tag and all its active descendent tags.
  """
  remainingTaskCount: Int!
  remainingTasks: RemainingTaskConnection!

  """
  The tags having this tag as their container.
  """
  tags: TagConnection!

  """
  The tasks having this tag.
  """
  tasks: TaskConnection!
}

"""
A task. This might represent the root of a project, an action within a project or other action or an inbox item.
"""
type Task implements Node & TaskInterface {
  """
  True if the task has a task that must be completed prior to it being actionable.
  """
  blocked: Boolean!

  """
  True if the task is completed. Use the "mark complete" and "mark incomplete" commands to change a task's status.
  """
  completed: Boolean!

  """
  If true, complete when children are completed.
  """
  completedByChildren: Boolean!

  """
  The task's date of completion. This can only be modified on a completed task to backdate the completion date.
  """
  completionDate: String

  """
  The task's project, up however many levels of parent tasks.  Inbox tasks aren't considered contained by their provisionalliy assigned container, so if the task is actually an inbox task, this will be missing value.
  """
  containingProject: Project

  """
  When the task was created.  This can only be set when the object is still in the inserted state.  For objects created in the document, it can be passed with the creation properties.  For objects in a quick entry tree, it can be set until the quick entry panel is saved.
  """
  creationDate: String!

  """
  When the task should become available for action.
  """
  deferDate: String

  """
  True if the task is dropped. Use the "mark dropped" and "mark incomplete" commands to change a task's status.
  """
  dropped: Boolean!

  """
  The date the task was dropped. This can only be modified on a dropped task to backdate the dropped date.
  """
  droppedDate: String

  """
  When the task must be finished.
  """
  dueDate: String

  """
  When the task should become available for action (including inherited).
  """
  effectiveDeferDate: String

  """
  When the task must be finished (including inherited).
  """
  effectiveDueDate: String

  """
  True if the task is completed, or any of it's containing tasks or project are completed.
  """
  effectivelyCompleted: Boolean!

  """
  True if the task is dropped, or any of it's containing tasks or project are dropped.
  """
  effectivelyDropped: Boolean!

  """
  The estimated time, in whole minutes, that this task will take to finish.
  """
  estimatedMinutes: Int

  """
  True if flagged
  """
  flagged: Boolean!
  flattenedTasks: FlattenedTaskConnection!

  """
  The identifier of the task.
  """
  id: String!

  """
  Returns true if the task itself is an inbox task or if the task is contained by an inbox task.
  """
  inInbox: Boolean!

  """
  When the task was last modified.
  """
  modificationDate: String!

  """
  The name of the task.
  """
  name: String!

  """
  If the task is the next task of its containing project, next is true.
  """
  next: Boolean!

  """
  The next defer date if this task repeats on a fixed schedule and it has a defer date.
  """
  nextDeferDate: String

  """
  The next due date if this task repeats on a fixed schedule and it has a due date.
  """
  nextDueDate: String

  """
  The note of the task.
  """
  note: RichText!

  """
  The number of available direct children of this task.
  """
  numberOfAvailableTasks: Int!

  """
  The number of completed direct children of this task.
  """
  numberOfCompletedTasks: Int!

  """
  The number of direct children of this task.
  """
  numberOfTasks: Int!

  """
  The task holding this task.  If this is missing value, then this is a top level task -- either the root of a project or an inbox item.
  """
  parentTask: Task

  """
  The task's first tag. Setting this will remove the current first tag on the task, if any and move or add the new tag as the first tag on the task. Setting this to missing value will remove the current first tag and leave any other remaining tags.
  """
  primaryTag: Tag

  """
  The repetition interval of the task, or missing value if it does not repeat. This property is deprecated in favor of “repetition rule” and is here only for backwards compatibility with existing scripts.
  """
  repetition: RepetitionInterval

  """
  The repetition rule for this task, or missing value if it does not repeat.
  """
  repetitionRule: RepetitionRule

  """
  If true, any children are sequentially dependent.
  """
  sequential: Boolean!

  """
  When set, the due date and defer date properties will use floating time zones. (Note: if a Task has no due or defer dates assigned, this property will revert to the database’s default setting.)
  """
  shouldUseFloatingTimeZone: Boolean!

  """
  The tags assigned to this task.
  """
  tags: TagConnection!

  """
  The tasks having this task as their container.
  """
  tasks: TaskConnection!
}

type TaskConnection implements Connection {
  byId(id: String!): TaskInterface
  edges: [TaskEdge!]!
  pageInfo: PageInfo!
}

type TaskEdge implements Edge {
  cursor: String!
  node: TaskInterface!
}

interface TaskInterface implements Node {
  """
  True if the task has a task that must be completed prior to it being actionable.
  """
  blocked: Boolean!

  """
  True if the task is completed. Use the "mark complete" and "mark incomplete" commands to change a task's status.
  """
  completed: Boolean!

  """
  If true, complete when children are completed.
  """
  completedByChildren: Boolean!

  """
  The task's date of completion. This can only be modified on a completed task to backdate the completion date.
  """
  completionDate: String

  """
  The task's project, up however many levels of parent tasks.  Inbox tasks aren't considered contained by their provisionalliy assigned container, so if the task is actually an inbox task, this will be missing value.
  """
  containingProject: Project

  """
  When the task was created.  This can only be set when the object is still in the inserted state.  For objects created in the document, it can be passed with the creation properties.  For objects in a quick entry tree, it can be set until the quick entry panel is saved.
  """
  creationDate: String!

  """
  When the task should become available for action.
  """
  deferDate: String

  """
  True if the task is dropped. Use the "mark dropped" and "mark incomplete" commands to change a task's status.
  """
  dropped: Boolean!

  """
  The date the task was dropped. This can only be modified on a dropped task to backdate the dropped date.
  """
  droppedDate: String

  """
  When the task must be finished.
  """
  dueDate: String

  """
  When the task should become available for action (including inherited).
  """
  effectiveDeferDate: String

  """
  When the task must be finished (including inherited).
  """
  effectiveDueDate: String

  """
  True if the task is completed, or any of it's containing tasks or project are completed.
  """
  effectivelyCompleted: Boolean!

  """
  True if the task is dropped, or any of it's containing tasks or project are dropped.
  """
  effectivelyDropped: Boolean!

  """
  The estimated time, in whole minutes, that this task will take to finish.
  """
  estimatedMinutes: Int

  """
  True if flagged
  """
  flagged: Boolean!
  flattenedTasks: FlattenedTaskConnection!

  """
  The identifier of the task.
  """
  id: String!

  """
  Returns true if the task itself is an inbox task or if the task is contained by an inbox task.
  """
  inInbox: Boolean!

  """
  When the task was last modified.
  """
  modificationDate: String!

  """
  The name of the task.
  """
  name: String!

  """
  If the task is the next task of its containing project, next is true.
  """
  next: Boolean!

  """
  The next defer date if this task repeats on a fixed schedule and it has a defer date.
  """
  nextDeferDate: String

  """
  The next due date if this task repeats on a fixed schedule and it has a due date.
  """
  nextDueDate: String

  """
  The note of the task.
  """
  note: RichText!

  """
  The number of available direct children of this task.
  """
  numberOfAvailableTasks: Int!

  """
  The number of completed direct children of this task.
  """
  numberOfCompletedTasks: Int!

  """
  The number of direct children of this task.
  """
  numberOfTasks: Int!

  """
  The task holding this task.  If this is missing value, then this is a top level task -- either the root of a project or an inbox item.
  """
  parentTask: Task

  """
  The task's first tag. Setting this will remove the current first tag on the task, if any and move or add the new tag as the first tag on the task. Setting this to missing value will remove the current first tag and leave any other remaining tags.
  """
  primaryTag: Tag

  """
  The repetition interval of the task, or missing value if it does not repeat. This property is deprecated in favor of “repetition rule” and is here only for backwards compatibility with existing scripts.
  """
  repetition: RepetitionInterval

  """
  The repetition rule for this task, or missing value if it does not repeat.
  """
  repetitionRule: RepetitionRule

  """
  If true, any children are sequentially dependent.
  """
  sequential: Boolean!

  """
  When set, the due date and defer date properties will use floating time zones. (Note: if a Task has no due or defer dates assigned, this property will revert to the database’s default setting.)
  """
  shouldUseFloatingTimeZone: Boolean!

  """
  The tags assigned to this task.
  """
  tags: TagConnection!

  """
  The tasks having this task as their container.
  """
  tasks: TaskConnection!
}

enum TextAlignment {
  CENTER
  JUSTIFIED
  LEFT
  NATURAL
  RIGHT
}
