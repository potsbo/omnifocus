directive @whose(condition: [Condition!]!) on FIELD

input Condition {
  enabled: Boolean! = true
  field: String
  operands: [Condition!]
  operator: String! = "="
  value: String! = "true"
}

interface Connection {
  byId(id: String!): Node
  edges: [Edge!]!
  pageInfo: PageInfo!
}

type DefaultDocument {
  flattenedTasks: TaskConnection!
  folders: FolderConnection!
  inboxTasks: TaskConnection!
  perspectiveNames: [String!]!
  projects: ProjectConnection!
  tags: TagConnection!
}

interface Edge {
  cursor: String!
  node: Node!
}

type Folder implements Node {
  id: String!
  name: String!
  projects: ProjectConnection!
}

type FolderConnection implements Connection {
  byId(id: String!): Folder
  edges: [FolderEdge!]!
  pageInfo: PageInfo!
}

type FolderEdge implements Edge {
  cursor: String!
  node: Folder!
}

interface Node {
  id: String!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

type Project implements Node {
  completed: Boolean!
  id: String!
  name: String!
  numberOfAvailableTasks: Int!
  rootTask: Task!
}

type ProjectConnection implements Connection {
  byId(id: String!): Project
  edges: [ProjectEdge!]!
  pageInfo: PageInfo!
}

type ProjectEdge implements Edge {
  cursor: String!
  node: Project!
}

type Query {
  defaultDocument: DefaultDocument!
}

type Tag implements Node {
  id: String!
  name: String!
  tags: TagConnection!
  tasks: TaskConnection!
}

type TagConnection implements Connection {
  byId(id: String!): Tag
  edges: [TagEdge!]!
  pageInfo: PageInfo!
}

type TagEdge implements Edge {
  cursor: String!
  node: Tag!
}

type Task implements Node {
  completed: Boolean!
  containingProject: Project
  effectiveDueDate: String
  effectivelyCompleted: Boolean!
  flagged: Boolean!
  id: String!
  name: String!
  tasks: TaskConnection!
}

type TaskConnection implements Connection {
  byId(id: String!): Task
  edges: [TaskEdge!]!
  pageInfo: PageInfo!
}

type TaskEdge implements Edge {
  cursor: String!
  node: Task!
}